{"basic_builder": {"build_no": 5, "large_icon": "iVBORw0KGgoAAAANSUhEUgAAAEgAAABICAYAAABV7bNHAAANqElEQVR4Xu1cCVSWVRp+WARlFVDE2A1QNDYVtY45WpnLqIxmrpNNm3WmaXGrKK3Uxr31NKktM9WoWWqh6Yia1mSZO4ssKogskiCLCPIDKjDn+eFfvn/77vfzA82cec/xgHz3vu97n+8u73Y/O3QOdQMwDEA0gBAA/gDsAPgBcARwqVUt/iwEcA7AMQAVHa0uleoI4qD/DOBJAL0BeFkptBpAMYCtAFYDaLCSj3C39gboUQAfAbAX1kh5w0QAq5R3E+vRHgBxybwLYJKYCjZrdQDA8wCybMaxdd3bil8YgLcBTLAVQyv5HAXwOIBMK/tLutliBnH5vAdgLoAutlDKBjyaAHwDYBaAG23h11aAAgDkAOjaFiXasS838XgAZ6yVYS1A7LcUwBJrBXdwv88APAagUalcawCiDfM1gLFKhXVy+wwAvwNQqUQPawA6DyBciRBTbUNDnTEk3g0DB7qCv7u62MPbm+YSUHrlJm7eaMaFvAakpNTi8E/V+PXXm20Vyf4lACIBVIkyUwKQC4AiAN6izA3bTZnijddeDUBwkBM8PVvAEKXKq7dQWNiABQsLcOgQ7UWrqQ5ATwC1IhyUAEQz3ypwtn0VjqkP+IjoI9wmKakSkx/gZLaKeLLRmlfJ9RYBiHtOmtJl1atXF3y4IRSTJlmFqZze2ue7vq3Ek09dREmJ4iVY2rrcrloSJgcQbZzvAIwS1phH22J/LFkcgC5dzLM/eqwGR45cx9GjNcjNrUdl5S0UFLaYLCHBzvDz64KwsK6Ii3PFyJEeiIt1gZ2daX63bjXj9aWXsGJlMZqblWiqPv4HW7KV5ABaCGCtqMiuXe2RcioK/fpx0hlTVrYKiYlF+PeP1bh2TdmJyxk5dIgbVq0MRGQkt0NjysxSIX5IBurqaCcK0z8A0Gc0SZYA8gBwTVQMT6PjR++Ag4MxyzMZKtx5ZwZqVYoUNyva1dUePxzqj8GD3Yza3LjRhPihGUhPl91e9PveDeAnUwLNAcS/U4KQhTxhQnd8u7OfEf/y8pvoPyAdZeWK9weh9+Lh4YC83Fj4+Bh7OKPvz8Z3B4XfL+U5m1pq5gB6H8DTIlqaAqepqRlvvnkZL7zEWFf7kr09sHZNMJ5/zg/29tLh3HNfFr7/Xtgk2A1goqG2pgDq1WrvyDqeXFanTkQZITAx4Rx277Z4ONgctT8keGHH9ggjkMIjUpB7QSiuxvV/J4Dj+sqZAugrAA/KjcDLywFlpYON9pzgkNMoLGqTAy0n2uzzgAAnFBUMlDxvbGyGu+cJ0Y37BIAhlgBisOuiiIa552Nx++3SLaozwdHo7NvTEaUlPLl1lJGhQlRMusiw2GYQgNOaxoYziEfen+Q4vbrEH0tfD9Q2454zbvxZ7D+gaFOUE2P184RJXkj6pq+k/6uvFWH5Gwxny9LJ1hCJuqEhQLJmVoC/E4oKpdN46bJLakPtt0TvvhOCZ59hkqSFaEz6B57GlStCJ6qrxg3RB2gKgB1yg9yfHInRoz21zSiwV+9Tct06/DlPt+KigfDzc9LK/uemMsx5+IKILmsAvGg4g24BcJDr3dzIdJaOevY6ifJydv3tEcMoeblxEsVc3I6LbNhcSepMjGYGERjZUe5LjsT9erPn8OFqjBhp0ySCYpQ/+FsozpxRYf0G+p7GVJgfh8BA2oAt9MEHJXj6mXwROfSX6jUAPQLg73K9DGePm/txm7kPcrJNPX/pxduwckWQ+tETc/Pw8SdXjJq5uNijtkZycsPOgYkPWaKx/IwGIB5r0rlo0J/Brh3bIrR/TU2tRdwgq2PhstrJNZj7hC82buijbXZHdBoyMxkLM6YLubHoE6ozSe4bnYWD8kG3ywBu0wBE6BllM0tpqdGIjtJ50eMnnMXevcKRS7nxKno+fjx9v75aq/mvK4qxeAmDnaZp/Lju2LNb5ytmZKoQFS1rFxFtFw1Assd7zbV4uLnp9vDu3icUhywUoWCmcWyMC1JOs+ahhRhLCu+bapF1Dx9HlF3RGY/V1Y3w9KLRLEvBBIiWI40js2R4GjCQPnBwxy8vf38nXDKwwQRPJaSnRiNKbwW4uh2HSj5uNIMAMV/0sSWA5jzUA599ysxyC334Uak6zNmR5OvbBTyRnJ11dRCPPHoBn35WJqTGmtVBWLTwNm3badPPY9t22QzQOgLEMpIXLElZtzYIC+brmM+anYMvtiov1Rk7xhPJ+5S7I87OdmontGdPXYCBUcmRo8RNjFkzfbB5ky5b9eZbv2LhItlwzHYCxNnDWWSWtn0ZjqlTdVmJmLh0pRE7aI7kL78qx4yZuUJvXdMo51ysOj6tT67ux6FSEKEcNswNv/x8h5bFtu0VmDadWXOLlEyAtgGY6u3lCHcP04b0Nzsi1MFzDY0clYn8AuOQRnNzMwpbA+/6YidO9MKuJJ3zmJVVB4JM/8gSOdgDe/b0w5j7u2ubUcbESeew51/KTlBDHzI5uQrjfn9WDqBULUBsyQ2QG6E1xMEOH5GJY8euS7pzcMl7jcOx2dl1uGt4BqqqzAfvk76OQEKCNG20aXMZHpoj5E9J9LAJQAyC8QgNDtKZ5iJgERzaRQcMwh0D+ncD7SdTgXzyLShowKD4M6ioMPZyPv6wDx57zFcinsezT8+TsjPPlM42AYiM3d3tce5sLHrrecGWQGIs6K7hxjOHfehRb9kchunTephlUVPTCF+/k6iv1y23t9YFY948ljJKKSw8FRfy6kXemVGbtgD0iam8UEPdEDg5yZcWDohKA/cUS7Rgfm+sWxtssQ0NN84Qw9NG02nV6mIkvmzeWpZDbdhQN/xyRLdJb99RgQeniW3STAwyQWhEV0oGSY5W/QaM9dIXoyctQnMf98X69aFGQXVNX87EeQsK8O7bjPpK6eLFBoRFpKCpDWm1mTN8sGWz7ph/+53LmL+gQE71HRYNRZdu9sjOikGQwZ7EPYcplcOHa+QESJ6PG9sdO5P6WkxJGzKkLLoS+flCmQmz+qx4IxCJiSzHbqHZf8zBli9kbTm1ocgSNUmqQ18Ka3ZST0dpYyqcOWPGnsXBQ8oNPvKNj2cG1jhVZG5kdELpjLaVOIaYGJ2p0sP3pMnDwUDOLALEfxYnL4sQSi8PgpeXI6Jj04WXlblBcWbWXpfGaEy1ZfqY9lJbycfbEeVlVjmrIRpvng6N+aOmVcP+/bvJbsiig6FJkZ0ZCxYlmCPBwJasyHvv9cR3+1lY1kLnc+rQtx8reiySJNzBeEGMXA9bP3d3d8DhH/sjJlo39TUyJk85h6SdtsnO0myJCNe5KmPHZ2OfvE8oCZix8JpXBjqcHB3tcOhgJO4ezmKSFtq1qxIJk62uHpOMoVs3e6gMlrPgzFzP+yWaJcaCQaGEUXshuHFDKOY+0QsNDU1gME7fcGyLTENHd+uXFZg5S9b+oUi+sRr9vJhsVLEtior0XbcmGN/uvqousLIFcQlXV/GQ1pFgoIwd1NjoAzQDwBe2UOy3wINuTn6eNOWTtLMSk6cILd13AMwzBIj/7/RZZCtwV68KwguLdEE+GpwhfVJQXCxUeWIy9UzdNrdeALGVnp3C555RHti/L1ISRVi5qhgvvyLky6UA0BYfGBYvhALI65RR2UgoLf+y0kESny8vrx5hEamiFbC0YLUpD1MFVLyHMdlG+nYoG4JToWcxUzidYBZQCYZnJbPH1B7Ev3Hh0s1VdldAD4rw8K7IybEubmMtolxWB/ZHGkUL7h6RiZ9+FnKq6W6NAPCzvg7mijg3tl6QU6zvkHhXddxl2fJisG6ovYmn1dLXA5D4kr9R5PLhR3Lx+efloiokAxhn2NgcQIyU8bKHUBmwhikLBWh3aEKsvHzCmBGr6NuDaOdknomWVG9o5MycnYOtylJTzKsbRf7MAUQ5rJJSlDowF2BLS6tF7EDbZmKPHhmAoUPdjXDnnsNq+9MpQpd5NP151eIHUy/REkBsvxjActG3T78nKyMGISGmg/6MPj77XD5OnrqO69eVhQc9PRwQE+uC998LlaSQ9XXjacViTcENWdOVd/BnmhujHEBWXWZZviwAi1/hdVbzlJpWq773xTKanNx6lFy+ifyClqjhf9NlFupLq5JRK10xjsCUCg52wsb1fTBmjC7pJ9BNcZN9+6ow96k8kwlLGWaMgQ0AYDG5LzeDNDIY1WKNm+JPSvDiyZZNYTa/N7Znz1VMn5FjbYUb/Q2WwMoGnEQB0swk3vk0vmIj+N6ZWXhjeaD6LpiLi2y9qISrStWovjTHGLU1hRN6zAgOCw2kKWAzY1ACkIYF616MczOCIGmaMcXNgtD4wW7qTd3REdoU07XqRtSpmtSZV55Ge5OrUGSb6w1cTiwSkJ05Gj2tAYj2Am/GKLqFqBC/9mjOSgVaymIFRa0aWAMQu/J04xdXFrXHSNqBJ4/yOdZETa0FSDMG1uDKpifbYcBKWLJ613IRowVubQWIrLnbMr8/uy0OrpIRC7SlFbofQEJnf9xEX9f/fx5H4M2xCaulGNMdI9jeVs3oS7HWUqi+V1SoLZaYOVmMBLD2kd8Wkq+jEdXYuB2/QsNCVMs1OFbyb0+A9FWiJT4fwF9arXHjVKrYAAgCa3c3AXjtf+Ejb+aGTVuKNgkrCm4HwIvEfFmsD+BPja1Cy50xctb7/qjUhhHD3HKr/wCHCzGJX7wGIwAAAABJRU5ErkJggg==", "author": "Mickey Perre", "tab_build_no": "12", "tab_version": "2.2.0", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAErUlEQVRYR7WYXVCUVRjHf+zyLYsgsJChiyBGKKuAFOlocSM1NDVToM400/TlnReVV91IM3XRRURNFzV2U+M4TSNWU05OZmj2ARqFKzjxaUtQSnyoCOK2LNucXc+678v7tYjn5p33Pf/nOf/znP8553neOBbfPgBqgTUqF8PAj8Azi3EdF4ORHRCD3RODjYBeBXKB/6zYWSU0CjitODTATAHLzXyYEaoBWs2cxNj/CvCuno0Rod+ACrPBHA4blRVpIVhb+3V8vqCZiej/G8jXAuoRugGk6Hn2XizH5UoyHHjw4k3WFp8zwgSAeDVAi1AbUK3lafRSJU5ngqLrfNcM/f0+7HYoLEzGXZaq6B8d9ZO3UgRbs/0D3BvdoyakqZmioiQG+sojds+/MMjHn4wZRuilF518dKAwglld8DvDw5obTaEpNaEFAqiry+DoVyUhx8ePX6X2sR4rGolgTp8qZdu29NB7w64+WlomDaUTTWhEHb7oyJRt9NDdPRsTGQnevj2dH06Whl6znR1MTMyp/UwDDvFREhLPeTUqGAhLaYPbw4ULiyMjfVZXp9H284bQa5y9XWtiQnyzkpAXcEWjJsY2s2JFPF8fvcITT/YuKjJqo59Or2frVgder481RZ2aUZKEFmhHRkdnNpYJZmfHMz5+e4lM/MZpEvrLW86qVUns3NXHYW0RWiL0emM+jfvzcaSfZXomrIi9e/N4/70Cenpnub/Uo/bjEITeBvZF9yxFdGpq0mk9UcqRzyepb+hTDGzg/3tBqB9Yu5SEhPaEBvUEbEBoQhBS6Ccz087keBUezwybKro0l+adJhev7hvSXTY5oC2+naDG1Xb+nJuyslTN3RYi9O/lSnJylFdC9GiBQJD4xDOhT488nM7J1vCZkpx6RnGZ2m0w5w8fFfsbh3njTXGHLmyHPyumvj6L4nWdDAz6FIBIhKSQ1ebRZESfnL3E5eR2RHZRdJ/R7rRESAxw/VoVaWkiMQy3+fkg9oRwZBQR8z+IzXb7kK/e0k37L+FDTzSzo8LT6cbt1l8yhai9f5bjWp3E3FyQhKSFZOSgARUp+X1H7R98d+Ka5lLJjwainhTTbAZejvbgm32ApJSzhk61lm9qKsDyzF8t22lE8pTuSW3q9RZAht/KUgnMnj1ODnxYqHd9hA7G0GStEtDCNTe5aGq+xMiIeWFh9eoQ+3PlnZCyYnvsmxIerc1gbNyPM3dBFinS5mUyQjZA5Lh3ra0vTaG7a6PRLlwG3IhO0C7fKuiWnFQ0mYLCToaGlIehyIOAUDJumsJGb9UvvpzkqaeVF6UZe7lMAvfscwMcPDiuZRLhoSa0A/hWbbGuOJnenk2Rzw07+2g5opkbRzC7d2fx6aHiyLtOZET/a8BbEqhVBnUAlVrTuDKxmYwMZSnV0TFNb+9N5oNBSu5LoaoqXDTKpiNg2S1kovhXoFco+rWKOOlFprdGyzU25seZp1uP6QbkjkvpxMQ4tjwUKhjuaiktZ1AHHDUTboz9Cs2obc3+fki82BpZMQ6shkdqLyM/VgkJHyKDEz+sxM+nWJq4+oVwLRV2sRBSkzgkEkiNK0f83BI79fFYWEvs/9LOfZz4dahMAAAAAElFTkSuQmCC", "visible": true, "theme": "#333", "description": "This add on provides an adaptive response action to query the SecurityTrails API", "friendly_name": "SecurityTrails Add-On For Splunk", "version": "1.0.0", "appname": "TA-securitytrails"}, "global_settings_builder": {"global_settings": {"customized_settings": [{"internal_name": "", "format_type": "text", "help_string": "Enter your API key provided by Security Trails", "name": "api_key", "type": "text", "label": "API Key", "value": "jJrSp2nrBuUDSrbSjnceLiYt4kgmsf6j", "default_value": "", "required": true}, {"internal_name": "", "format_type": "text", "help_string": "Enter index name where results will stored", "name": "index", "type": "text", "label": "Index", "value": "main", "default_value": "main", "required": true}], "proxy_settings": {"proxy_enabled": 0, "proxy_port": "8080", "proxy_type": "http", "proxy_url": "127.0.0.1"}, "log_settings": {}}}, "alert_action_builder": {"modular_alerts": [{"short_name": "history_dns", "label": "History DNS", "description": "Lists out specific historical information about the given domain parameter.", "active_response": {"subject": ["endpoint"], "category": ["Information Gathering"], "technology": [{"product": "API", "version": ["1.0.0"], "vendor": "Security Trails"}], "supports_adhoc": true, "task": ["update"]}, "uuid": "d91633b2129f4622bbf159285e597a16", "parameters": [{"format_type": "text", "help_string": "Domain to be searched", "name": "domain", "type": "", "label": "Domain", "value": "securitytrails.com", "default_value": "", "required": true}, {"format_type": "dropdownlist", "help_string": "The DNS record type.", "name": "record_type", "possible_values": {"AAAA": "aaaa", "A": "a", "NS": "ns", "MX": "mx", "SOA": "soa", "TXT": "txt"}, "type": "", "label": "Record Type", "value": "aaaa", "default_value": "a", "required": true}, {"format_type": "text", "help_string": "This notes field is for the purpose of tying a reason to the request that was made.", "name": "search_description", "type": "", "label": "Search Description", "value": "Adaptive Response Action", "default_value": "Adaptive Response Action", "required": true}], "smallIcon": "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", "code": "# encoding = utf-8\n\ndef process_event(helper, *args, **kwargs):\n    \"\"\"\n    # IMPORTANT\n    # Do not remove the anchor macro:start and macro:end lines.\n    # These lines are used to generate sample code. If they are\n    # removed, the sample code will not be updated when configurations\n    # are updated.\n\n    [sample_code_macro:start]\n\n    # The following example gets the setup parameters and prints them to the log\n    api_key = helper.get_global_setting(\"api_key\")\n    helper.log_info(\"api_key={}\".format(api_key))\n    index = helper.get_global_setting(\"index\")\n    helper.log_info(\"index={}\".format(index))\n\n    # The following example gets and sets the log level\n    helper.set_log_level(helper.log_level)\n\n    # The following example gets account information\n    user_account = helper.get_user_credential(\"<account_name>\")\n\n    # The following example sends rest requests to some endpoint\n    # response is a response object in python requests library\n    response = helper.send_http_request(\"http://www.splunk.com\", \"GET\", parameters=None,\n                                        payload=None, headers=None, cookies=None, verify=True, cert=None, timeout=None, use_proxy=True)\n    # get the response headers\n    r_headers = response.headers\n    # get the response body as text\n    r_text = response.text\n    # get response body as json. If the body text is not a json string, raise a ValueError\n    r_json = response.json()\n    # get response cookies\n    r_cookies = response.cookies\n    # get redirect history\n    historical_responses = response.history\n    # get response status code\n    r_status = response.status_code\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\n    response.raise_for_status()\n\n\n    # The following example gets the alert action parameters and prints them to the log\n    domain = helper.get_param(\"domain\")\n    helper.log_info(\"domain={}\".format(domain))\n\n    record_type = helper.get_param(\"record_type\")\n    helper.log_info(\"record_type={}\".format(record_type))\n\n    search_description = helper.get_param(\"search_description\")\n    helper.log_info(\"search_description={}\".format(search_description))\n\n\n    # The following example adds two sample events (\"hello\", \"world\")\n    # and writes them to Splunk\n    # NOTE: Call helper.writeevents() only once after all events\n    # have been added\n    helper.addevent(\"hello\", sourcetype=\"sample_sourcetype\")\n    helper.addevent(\"world\", sourcetype=\"sample_sourcetype\")\n    helper.writeevents(index=\"summary\", host=\"localhost\", source=\"localhost\")\n\n    # The following example gets the events that trigger the alert\n    events = helper.get_events()\n    for event in events:\n        helper.log_info(\"event={}\".format(event))\n\n    # helper.settings is a dict that includes environment configuration\n    # Example usage: helper.settings[\"server_uri\"]\n    helper.log_info(\"server_uri={}\".format(helper.settings[\"server_uri\"]))\n    [sample_code_macro:end]\n    \"\"\"\n    import json\n    \n    helper.log_info(\"Alert action history_dns started.\")\n    \n    proxy = helper.get_proxy()\n    \n    if proxy:\n        use_proxy = True\n    else:\n        use_proxy = False\n    \n    #Get Global Parameters\n    api_key = helper.get_global_setting(\"api_key\")\n    index_name = helper.get_global_setting(\"index\")\n    \n    #Get Local Parameters\n    domain = helper.get_param(\"domain\")\n    search_description = helper.get_param(\"search_description\")\n    record_type = helper.get_param(\"record_type\")\n    \n    #Create the URI String that looks for the domain\n    url = 'https://api.securitytrails.com/v1/history/{}/dns/{}'.format(domain,record_type)\n    \n    method = \"GET\"\n    \n    #Build HTTP Connection\n    #http = helper.build_http_connection(helper.proxy, timeout=30)\n    \n    \n    #Create Header Values\n    headers = {\n    'APIKEY' : '{}'.format(api_key)\n    }\n    \n    #Make HTTP Request\n    response = helper.send_http_request(url, method, parameters=None, payload=None, headers=headers, cookies=None, verify=True, cert=None, timeout=10, use_proxy=use_proxy)\n\n    if response.status_code == 200:\n        #Log successfull request\n        helper.log_info(\"Received 200 OK from security trails for domain {}.\".format(domain))\n        \n        #Add note information to JSON output\n        json_load = response.json()\n        json_load['search_description'] = search_description\n        json_load['search_type'] = \"DNS History Search\"\n        \n        #Convert output to JSON String\n        json_data = json.dumps(json_load)\n        \n        #Add Event to Adaptive Response Framework\n        helper.addevent(json_data, sourcetype=\"securitytrails:json\")\n        try:\n            #Try writing to the specified index in global settings\n            helper.writeevents(source=\"securitytrails\", index=index_name, host=\"adaptive_response\")\n        except Exception as e:\n            #If that fails write this as an exception\n            helper.log_error(\"Error with writing event. Error Message:{}\".format(e))\n\n    elif response.status_code == 429:\n        error_message = {\"error\" : \"You have reached your API access limit.  Please contact Security Trails sales team\"}\n        json_data = json.dumps(error_message)\n        helper.addevent(json_data, sourcetype=\"securitytrails:json\")\n        \n        try:\n            #Try writing to the specified index in global settings\n            helper.writeevents(source=\"securitytrails\", index=index_name, host=\"adaptive_response\")\n        except Exception as e:\n            #If that fails write this as an exception\n            helper.log_error(\"Error with writing event. Error Message:{}\".format(e))\n    \n    else:        \n        #If all fails then output an error message to the logging framework for passing onto security trails.\n        helper.log_error(\"Error with request of {}, response code of {} and content of {}.  Please pass this information onto security trails if you believe this is incorrect.\".format(domain,response.status_code,response.json()))\n    \n    \n \n    \n\n    # TODO: Implement your alert action logic here\n    return 0\n", "largeIcon": "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"}, {"short_name": "get_domain", "label": "Get Domain", "description": "Performs lookup of a domain name.", "active_response": {"subject": ["endpoint"], "category": ["Information Gathering"], "technology": [{"product": "API", "version": ["1.0.0"], "vendor": "Security Trails"}], "supports_adhoc": true, "task": ["update"]}, "uuid": "d5b9957a9d5145118de23502f8b330f9", "parameters": [{"format_type": "text", "help_string": "Domain name to pass into the security trails API", "name": "domain", "type": "", "label": "Domain", "value": "google.de", "default_value": "", "required": true}, {"format_type": "text", "help_string": "This notes field is for the purpose of tying a reason to the request that was made.", "name": "search_description", "type": "", "label": "Search Description", "value": "Adaptive Response Action", "default_value": "Adaptive Response Action", "required": true}], "smallIcon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAGUUlEQVRYR+1Xa2wUVRQ+986WR+WhRIX64hFEo2hUVJTuXWr8gUTFCLR0Zkvd2UqJURPfAcGIWImKCoiGQMrckbJ3ylYxanxrLHu3KUpqkBjimx8CvvABlErd2Tlmtrtl2G53l8cPYpxfu3PvOeeb7zvn3HMJnGIPOcXwwH8PkG6xDkC4Ks30r1yTI0+E9WNiqDbCrv27ZFRHS1VLMhV0CVB9AktyTab86IJhp0/6WqqgZx2B6JvYDF4t3ygWZFGA6qOThifs0l8I4CIE8gwA7ASAy5DALkLpIj5ni+UGDFuBGYjY4K4BwNcAMIYihBwKTQSc0YbatrcQsKIA6Rb7jKvyWtdZKBK48PfOQ3vemt/Rlc95/dpJJYnhpZfxavl5mr0fuSbPPymAQmLqrRScxw1NXu11qEX8Z4hg/E/vu4olFb7WJa22951usdUE4RtDk6tPGJBusRcAYTbX5AUZZ2HB9iJAGSF0pqFueT0s2AoKwBs1uaPOClzpILqsuIz02ujCv40A2Wdocno+UDklmxsNjPUlQUDSeQooeZZr8pJUjmwKVGESN6FPKTOrWn/ukZCtoQTmIMAwoDArk8Bhq/wcRLqHUDLNqI59kJbtPQT8gACZThCfMYLxj7LB5QSkC5bAwcpZ5LC9nqvxWT3OAisJ4GhDk7d7nYQFexgI/JVIkI9KfHiXoclHjpJLsI8RYIepyftTfiKsmVDnAQfpblOTtCCgcKS8DhVKeLVs7JUo4q9FIPfwYE9iZz9hi81zATXVxnblWtctfzs6dLkZjG3OrOvN7CqCZJ6hxu7y2vRhyE3KsROSic4/laEtd7d2pqnGTK85HkB9fKT7V6fPLm2pav87L6BUXgj/l6YWn5h2tBN8MJVXyd/6S8ZCDLl2dZEpo5H4XjW02DU9MdgfpiZHFJQs+2vc7puPnVSyF5CsVyaPr5BgTlE5lAog/JsMLT6npomVlZSkKuel/thJfX2zv5LYifbGmk9359sXtgKNCPAEV2M/hkXgwd8OHlqT3WCPyiFd+H8HIMMRnOmm1vahLgINyURizYY72vfkC1TsmiomjxxMBs421NjLIeu6MQR93yOQ/V7psgAdLY9usa12Yv+NTbU7DuUL6srqrheStjJaMeQ0O2mampzdK6PFHK4eKf/8gETgTew+UGvq2//KBah+7aTSdfM7utKADnFNDnFPeCCQApj9uIe0nSx92lBlb6nrIjUtKJm92YAOAsDApOPctqGm7d2wxUL/2HZ849z277Kd64LtQsCRphYv9a7pwt9NgWxYr8l52Ta1Uf8FNEEnmsHYO+GIfxxS8jUgHOaaHJoT0BEaA5u5GpsZ4hWnwwBngRmMLQgJ1mVqsjRssaWI8FgyYZ/XX27dKdjlSYAvHAK3vKLKtzOVqltseYnS1bCuqmO/LtjCTp+9sqg+lF3qqR5ClXcdxIvd+cYIxjcUk8huUQDBRwFhT/bo0V87yX2WWWw7r5ZXZnJBF8wdyh5BilVmdbylGDDunukvjh846sxRDwGQBkC4iQfl+56etI9r8syiG2PJwa4B6+Z3JLwGldHrB2dTnLfvrC8fatS1uXnZ53EZyhWjD0NhwWY5SM4zg7FVxTJxPPvCwu8HgJsNLb7Qa59TspDwdyvoTHCoIrgqy12D+iZWllBg765vlJLsibA/QJXRSwcMsUd0KzYZ15ieBHTBWtEh9xLqbOdavLfc81bZ3M1TzvYdVqLoKAuIknyNq/Jcj/aHCYGlhiqX5WNGj/ifBEIe4poc7GmCHUBhBSRJJTqkwazZsq2oHPJuCgt2HyIs5MEj9626aMV4x05+CwAuuI8RoZlQpOgQDQCmAsAg2ybjvPORLthXACB5jv5UULI+TTDCpgGFJzM3j6MaYZSdhYlkisFuMmC3pbXu62sfWAUKfsWr5ZpC+VbsNWg7V+UVrrO65ikTHar8km8+cvcFN04eNpAOutTQtrS7/3WL/cRVWXZSAFV8UuEb85N9gALlCFgPAB0AMNklBQhZzNXYc24gdy5ChOcBYCgAfglAxhPAxQiwzLYPjCh0SLs+imIo81Xh6A0X/bATv/dWmbfjpn+7g3vP4YpA7oyUT26sadtaiJm8VVascUoKwdoAYEraZncxt9N8/o+JoWMBerx7/wdUiLl/AWgP+kMSJDPlAAAAAElFTkSuQmCC", "code": "# encoding = utf-8\n\ndef process_event(helper, *args, **kwargs):\n    \"\"\"\n    # IMPORTANT\n    # Do not remove the anchor macro:start and macro:end lines.\n    # These lines are used to generate sample code. If they are\n    # removed, the sample code will not be updated when configurations\n    # are updated.\n\n    [sample_code_macro:start]\n\n    # The following example gets the setup parameters and prints them to the log\n    api_key = helper.get_global_setting(\"api_key\")\n    helper.log_info(\"api_key={}\".format(api_key))\n    index = helper.get_global_setting(\"index\")\n    helper.log_info(\"index={}\".format(index))\n\n    # The following example gets account information\n    user_account = helper.get_user_credential(\"<account_name>\")\n\n    # The following example sends rest requests to some endpoint\n    # response is a response object in python requests library\n    response = helper.send_http_request(\"http://www.splunk.com\", \"GET\", parameters=None,\n                                        payload=None, headers=None, cookies=None, verify=True, cert=None, timeout=None, use_proxy=True)\n    # get the response headers\n    r_headers = response.headers\n    # get the response body as text\n    r_text = response.text\n    # get response body as json. If the body text is not a json string, raise a ValueError\n    r_json = response.json()\n    # get response cookies\n    r_cookies = response.cookies\n    # get redirect history\n    historical_responses = response.history\n    # get response status code\n    r_status = response.status_code\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\n    response.raise_for_status()\n\n\n    # The following example gets and sets the log level\n    helper.set_log_level(helper.log_level)\n\n    # The following example gets the alert action parameters and prints them to the log\n    domain = helper.get_param(\"domain\")\n    helper.log_info(\"domain={}\".format(domain))\n\n    search_description = helper.get_param(\"search_description\")\n    helper.log_info(\"search_description={}\".format(search_description))\n\n\n    # The following example adds two sample events (\"hello\", \"world\")\n    # and writes them to Splunk\n    # NOTE: Call helper.writeevents() only once after all events\n    # have been added\n    helper.addevent(\"hello\", sourcetype=\"sample_sourcetype\")\n    helper.addevent(\"world\", sourcetype=\"sample_sourcetype\")\n    helper.writeevents(index=\"summary\", host=\"localhost\", source=\"localhost\")\n\n    # The following example gets the events that trigger the alert\n    events = helper.get_events()\n    for event in events:\n        helper.log_info(\"event={}\".format(event))\n\n    # helper.settings is a dict that includes environment configuration\n    # Example usage: helper.settings[\"server_uri\"]\n    helper.log_info(\"server_uri={}\".format(helper.settings[\"server_uri\"]))\n    [sample_code_macro:end]\n    \"\"\"\n    import json\n    \n    helper.log_info(\"Alert action security_trails_get_domain started.\")\n    \n    proxy = helper.get_proxy()\n    \n    if proxy:\n        use_proxy = True\n    else:\n        use_proxy = False\n    \n    #Get Global Parameters\n    api_key = helper.get_global_setting(\"api_key\")\n    index_name = helper.get_global_setting(\"index\")\n    \n    #Get Local Parameters\n    domain = helper.get_param(\"domain\")\n    search_description = helper.get_param(\"search_description\")\n    \n    #Create the URI String that looks for the domain\n    url = 'https://api.securitytrails.com/v1/domain/{}'.format(domain)\n    \n    method = \"GET\"\n    \n    #Build HTTP Connection\n    #http = helper.build_http_connection(helper.proxy, timeout=30)\n    \n    \n    #Create Header Values\n    headers = {\n    'APIKEY' : '{}'.format(api_key)\n    }\n    \n    #Make HTTP Request\n    response = helper.send_http_request(url, method, parameters=None, payload=None, headers=headers, cookies=None, verify=True, cert=None, timeout=10, use_proxy=use_proxy)\n\n    if response.status_code == 200:\n        #Log successfull request\n        helper.log_info(\"Received 200 OK from security trails for domain {}.\".format(domain))\n        \n        #Add note information to JSON output\n        json_load = response.json()\n        json_load['search_description'] = search_description\n        json_load['search_type'] = \"DNS Domain Search\"\n        \n        #Convert output to JSON String\n        json_data = json.dumps(json_load)\n        \n        #Add Event to Adaptive Response Framework\n        helper.addevent(json_data, sourcetype=\"securitytrails:json\")\n        try:\n            #Try writing to the specified index in global settings\n            helper.writeevents(source=\"securitytrails\", index=index_name, host=\"adaptive_response\")\n        except Exception as e:\n            #If that fails write this as an exception\n            helper.log_error(\"Error with writing event. Error Message:{}\".format(e))\n\n    elif response.status_code == 429:\n        error_message = {\"error\" : \"You have reached your API access limit.  Please contact Security Trails sales team\"}\n        json_data = json.dumps(error_message)\n        helper.addevent(json_data, sourcetype=\"securitytrails:json\")\n        \n        try:\n            #Try writing to the specified index in global settings\n            helper.writeevents(source=\"securitytrails\", index=index_name, host=\"adaptive_response\")\n        except Exception as e:\n            #If that fails write this as an exception\n            helper.log_error(\"Error with writing event. Error Message:{}\".format(e))\n    \n    else:        \n        #If all fails then output an error message to the logging framework for passing onto security trails.\n        helper.log_error(\"Error with request of {}, response code of {} and content of {}.  Please pass this information onto security trails if you believe this is incorrect.\".format(domain,response.status_code,response.json()))\n    \n    \n \n    \n\n    # TODO: Implement your alert action logic here\n    return 0\n", "largeIcon": "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"}, {"short_name": "get_whois", "label": "Get Whois", "description": "Fetches the current WHOIS data for a given domain.", "active_response": {"subject": ["endpoint"], "category": ["Information Gathering"], "technology": [{"product": "API", "version": ["1.0.0"], "vendor": "Security Trails"}], "supports_adhoc": true, "task": ["update"]}, "uuid": "2d6d80961f4d4a00bf29ac7b1df371ca", "parameters": [{"format_type": "text", "help_string": "Domain name to pass into the security trails API", "name": "domain", "type": "", "label": "Domain", "value": "securitytrails.com", "default_value": "", "required": true}, {"format_type": "text", "help_string": "This notes field is for the purpose of tying a reason to the request that was made.", "name": "search_description", "type": "", "label": "Search Description", "value": "Adaptive Response Action", "default_value": "Adaptive Response Action", "required": true}], "smallIcon": "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", "code": "# encoding = utf-8\n\ndef process_event(helper, *args, **kwargs):\n    \"\"\"\n    # IMPORTANT\n    # Do not remove the anchor macro:start and macro:end lines.\n    # These lines are used to generate sample code. If they are\n    # removed, the sample code will not be updated when configurations\n    # are updated.\n\n    [sample_code_macro:start]\n\n    # The following example gets the setup parameters and prints them to the log\n    api_key = helper.get_global_setting(\"api_key\")\n    helper.log_info(\"api_key={}\".format(api_key))\n    index = helper.get_global_setting(\"index\")\n    helper.log_info(\"index={}\".format(index))\n\n    # The following example gets and sets the log level\n    helper.set_log_level(helper.log_level)\n\n    # The following example gets account information\n    user_account = helper.get_user_credential(\"<account_name>\")\n\n    # The following example sends rest requests to some endpoint\n    # response is a response object in python requests library\n    response = helper.send_http_request(\"http://www.splunk.com\", \"GET\", parameters=None,\n                                        payload=None, headers=None, cookies=None, verify=True, cert=None, timeout=None, use_proxy=True)\n    # get the response headers\n    r_headers = response.headers\n    # get the response body as text\n    r_text = response.text\n    # get response body as json. If the body text is not a json string, raise a ValueError\n    r_json = response.json()\n    # get response cookies\n    r_cookies = response.cookies\n    # get redirect history\n    historical_responses = response.history\n    # get response status code\n    r_status = response.status_code\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\n    response.raise_for_status()\n\n\n    # The following example gets the alert action parameters and prints them to the log\n    domain = helper.get_param(\"domain\")\n    helper.log_info(\"domain={}\".format(domain))\n\n    search_description = helper.get_param(\"search_description\")\n    helper.log_info(\"search_description={}\".format(search_description))\n\n\n    # The following example adds two sample events (\"hello\", \"world\")\n    # and writes them to Splunk\n    # NOTE: Call helper.writeevents() only once after all events\n    # have been added\n    helper.addevent(\"hello\", sourcetype=\"sample_sourcetype\")\n    helper.addevent(\"world\", sourcetype=\"sample_sourcetype\")\n    helper.writeevents(index=\"summary\", host=\"localhost\", source=\"localhost\")\n\n    # The following example gets the events that trigger the alert\n    events = helper.get_events()\n    for event in events:\n        helper.log_info(\"event={}\".format(event))\n\n    # helper.settings is a dict that includes environment configuration\n    # Example usage: helper.settings[\"server_uri\"]\n    helper.log_info(\"server_uri={}\".format(helper.settings[\"server_uri\"]))\n    [sample_code_macro:end]\n    \"\"\"\n    import json\n    \n    helper.log_info(\"Alert action history_dns started.\")\n    \n    proxy = helper.get_proxy()\n    \n    if proxy:\n        use_proxy = True\n    else:\n        use_proxy = False\n    \n    #Get Global Parameters\n    api_key = helper.get_global_setting(\"api_key\")\n    index_name = helper.get_global_setting(\"index\")\n    \n    #Get Local Parameters\n    domain = helper.get_param(\"domain\")\n    search_description = helper.get_param(\"search_description\")\n    \n    #Create the URI String that looks for the domain\n    url = 'https://api.securitytrails.com/v1/domain/{}/whois'.format(domain)\n    \n    method = \"GET\"\n    \n    #Build HTTP Connection\n    #http = helper.build_http_connection(helper.proxy, timeout=30)\n    \n    \n    #Create Header Values\n    headers = {\n    'APIKEY' : '{}'.format(api_key)\n    }\n    \n    #Make HTTP Request\n    response = helper.send_http_request(url, method, parameters=None, payload=None, headers=headers, cookies=None, verify=True, cert=None, timeout=10, use_proxy=use_proxy)\n\n    if response.status_code == 200:\n        #Log successfull request\n        helper.log_info(\"Received 200 OK from security trails for domain {}.\".format(domain))\n        \n        #Add note information to JSON output\n        json_load = response.json()\n        json_load['search_description'] = search_description\n        json_load['search_type'] = \"DNS Whois Search\"\n        \n        #Convert output to JSON String\n        json_data = json.dumps(json_load)\n        \n        #Add Event to Adaptive Response Framework\n        helper.addevent(json_data, sourcetype=\"securitytrails:json\")\n        try:\n            #Try writing to the specified index in global settings\n            helper.writeevents(source=\"securitytrails\", index=index_name, host=\"adaptive_response\")\n        except Exception as e:\n            #If that fails write this as an exception\n            helper.log_error(\"Error with writing event. Error Message:{}\".format(e))\n\n    elif response.status_code == 429:\n        error_message = {\"error\" : \"You have reached your API access limit.  Please contact Security Trails sales team\"}\n        json_data = json.dumps(error_message)\n        helper.addevent(json_data, sourcetype=\"securitytrails:json\")\n        \n        try:\n            #Try writing to the specified index in global settings\n            helper.writeevents(source=\"securitytrails\", index=index_name, host=\"adaptive_response\")\n        except Exception as e:\n            #If that fails write this as an exception\n            helper.log_error(\"Error with writing event. Error Message:{}\".format(e))\n    \n    else:        \n        #If all fails then output an error message to the logging framework for passing onto security trails.\n        helper.log_error(\"Error with request of {}, response code of {} and content of {}.  Please pass this information onto security trails if you believe this is incorrect.\".format(domain,response.status_code,response.json()))\n    \n    \n \n    \n\n    # TODO: Implement your alert action logic here\n    return 0\n", "largeIcon": "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"}, {"short_name": "history_whois", "label": "History Whois", "description": "Returns historical WHOIS information about the given domain.", "active_response": {"subject": ["endpoint"], "category": ["Information Gathering"], "technology": [{"product": "API", "version": ["1.0.0"], "vendor": "Security Trails"}], "supports_adhoc": true, "task": ["create"]}, "uuid": "14482e1816094804a820dfc5e8e08e0f", "parameters": [{"format_type": "text", "help_string": "Domain name to pass into the security trails API", "name": "domain", "type": "", "label": "Domain", "value": "netflix.com", "default_value": "", "required": true}, {"format_type": "text", "help_string": "This notes field is for the purpose of tying a reason to the request that was made.", "name": "search_description", "type": "", "label": "Search Description", "value": "Adaptive Response Action", "default_value": "Adaptive Response Action", "required": true}], "smallIcon": "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", "code": "# encoding = utf-8\n\ndef process_event(helper, *args, **kwargs):\n    \"\"\"\n    # IMPORTANT\n    # Do not remove the anchor macro:start and macro:end lines.\n    # These lines are used to generate sample code. If they are\n    # removed, the sample code will not be updated when configurations\n    # are updated.\n\n    [sample_code_macro:start]\n\n    # The following example gets the setup parameters and prints them to the log\n    api_key = helper.get_global_setting(\"api_key\")\n    helper.log_info(\"api_key={}\".format(api_key))\n    index = helper.get_global_setting(\"index\")\n    helper.log_info(\"index={}\".format(index))\n\n    # The following example gets account information\n    user_account = helper.get_user_credential(\"<account_name>\")\n\n    # The following example gets and sets the log level\n    helper.set_log_level(helper.log_level)\n\n    # The following example sends rest requests to some endpoint\n    # response is a response object in python requests library\n    response = helper.send_http_request(\"http://www.splunk.com\", \"GET\", parameters=None,\n                                        payload=None, headers=None, cookies=None, verify=True, cert=None, timeout=None, use_proxy=True)\n    # get the response headers\n    r_headers = response.headers\n    # get the response body as text\n    r_text = response.text\n    # get response body as json. If the body text is not a json string, raise a ValueError\n    r_json = response.json()\n    # get response cookies\n    r_cookies = response.cookies\n    # get redirect history\n    historical_responses = response.history\n    # get response status code\n    r_status = response.status_code\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\n    response.raise_for_status()\n\n\n    # The following example gets the alert action parameters and prints them to the log\n    domain = helper.get_param(\"domain\")\n    helper.log_info(\"domain={}\".format(domain))\n\n    search_description = helper.get_param(\"search_description\")\n    helper.log_info(\"search_description={}\".format(search_description))\n\n\n    # The following example adds two sample events (\"hello\", \"world\")\n    # and writes them to Splunk\n    # NOTE: Call helper.writeevents() only once after all events\n    # have been added\n    helper.addevent(\"hello\", sourcetype=\"sample_sourcetype\")\n    helper.addevent(\"world\", sourcetype=\"sample_sourcetype\")\n    helper.writeevents(index=\"summary\", host=\"localhost\", source=\"localhost\")\n\n    # The following example gets the events that trigger the alert\n    events = helper.get_events()\n    for event in events:\n        helper.log_info(\"event={}\".format(event))\n\n    # helper.settings is a dict that includes environment configuration\n    # Example usage: helper.settings[\"server_uri\"]\n    helper.log_info(\"server_uri={}\".format(helper.settings[\"server_uri\"]))\n    [sample_code_macro:end]\n    \"\"\"\n    import json\n    \n    helper.log_info(\"Alert action history_dns started.\")\n    \n    proxy = helper.get_proxy()\n    \n    if proxy:\n        use_proxy = True\n    else:\n        use_proxy = False\n    \n    #Get Global Parameters\n    api_key = helper.get_global_setting(\"api_key\")\n    index_name = helper.get_global_setting(\"index\")\n    \n    #Get Local Parameters\n    domain = helper.get_param(\"domain\")\n    search_description = helper.get_param(\"search_description\")\n    \n    #Create the URI String that looks for the domain\n    url = 'https://api.securitytrails.com/v1/domain/{}/whois'.format(domain)\n    \n    method = \"GET\"\n    \n    \n    #Create Header Values\n    headers = {\n    'APIKEY' : '{}'.format(api_key)\n    }\n    \n    #Make HTTP Request\n    response = helper.send_http_request(url, method, parameters=None, payload=None, headers=headers, cookies=None, verify=True, cert=None, timeout=10, use_proxy=use_proxy)\n\n    if response.status_code == 200:\n        #Log successfull request\n        helper.log_info(\"Received 200 OK from security trails for domain {}.\".format(domain))\n        \n        #Add note information to JSON output\n        json_load = response.json()\n        json_load['search_description'] = search_description\n        json_load['search_type'] = \"Whois History Search\"\n        \n        #Convert output to JSON String\n        json_data = json.dumps(json_load)\n        \n        #Add Event to Adaptive Response Framework\n        helper.addevent(json_data, sourcetype=\"securitytrails:json\")\n        try:\n            #Try writing to the specified index in global settings\n            helper.writeevents(source=\"securitytrails\", index=index_name, host=\"adaptive_response\")\n        except Exception as e:\n            #If that fails write this as an exception\n            helper.log_error(\"Error with writing event. Error Message:{}\".format(e))\n            \n    elif response.status_code == 400:\n        #Log successfull request\n        helper.log_info(\"Received 400 error from security trails for domain {}.\".format(domain))\n        \n        #Add note information to JSON output\n        json_load = response.json()\n        json_load['search_description'] = search_description\n        json_load['domain'] = domain\n        json_load['search_type'] = \"Whois History Search\"\n        \n        #Convert output to JSON String\n        json_data = json.dumps(json_load)\n        \n        #Add Event to Adaptive Response Framework\n        helper.addevent(json_data, sourcetype=\"securitytrails:json\")\n        try:\n            #Try writing to the specified index in global settings\n            helper.writeevents(source=\"securitytrails\", index=index_name, host=\"adaptive_response\")\n        except Exception as e:\n            #If that fails write this as an exception\n            helper.log_error(\"Error with writing event. Error Message:{}\".format(e))\n\n    elif response.status_code == 429:\n        error_message = {\"error\" : \"You have reached your API access limit.  Please contact Security Trails sales team\"}\n        json_data = json.dumps(error_message)\n        helper.addevent(json_data, sourcetype=\"securitytrails:json\")\n        \n        try:\n            #Try writing to the specified index in global settings\n            helper.writeevents(source=\"securitytrails\", index=index_name, host=\"adaptive_response\")\n        except Exception as e:\n            #If that fails write this as an exception\n            helper.log_error(\"Error with writing event. Error Message:{}\".format(e))\n    \n    else:        \n        #If all fails then output an error message to the logging framework for passing onto security trails.\n        helper.log_error(\"Error with request of {}, response code of {} and content of {}.  Please pass this information onto security trails if you believe this is incorrect.\".format(domain,response.status_code,response.json()))\n    \n    \n \n    \n\n    # TODO: Implement your alert action logic here\n    return 0\n", "largeIcon": "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"}, {"short_name": "list_subdomains", "label": "List Subdomains", "description": "List subdomains for a given domain", "active_response": {"subject": ["endpoint"], "category": ["Information Gathering"], "technology": [{"product": "API", "version": ["1.0.0"], "vendor": "Security Trails"}], "supports_adhoc": true, "task": ["update"]}, "uuid": "0939fba80df94ff2a0486defda2317a8", "parameters": [{"format_type": "text", "help_string": "Domain name to pass into the security trails API", "name": "domain", "type": "", "label": "Domain", "value": "securitytrails.com", "default_value": "", "required": true}, {"format_type": "text", "help_string": "This notes field is for the purpose of tying a reason to the request that was made.", "name": "search_description", "type": "", "label": "Search Description", "value": "Adaptive Response Action", "default_value": "Adaptive Response Action", "required": true}], "smallIcon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAErUlEQVRYR7WYXVCUVRjHf+zyLYsgsJChiyBGKKuAFOlocSM1NDVToM400/TlnReVV91IM3XRRURNFzV2U+M4TSNWU05OZmj2ARqFKzjxaUtQSnyoCOK2LNucXc+678v7tYjn5p33Pf/nOf/znP8553neOBbfPgBqgTUqF8PAj8Azi3EdF4ORHRCD3RODjYBeBXKB/6zYWSU0CjitODTATAHLzXyYEaoBWs2cxNj/CvCuno0Rod+ACrPBHA4blRVpIVhb+3V8vqCZiej/G8jXAuoRugGk6Hn2XizH5UoyHHjw4k3WFp8zwgSAeDVAi1AbUK3lafRSJU5ngqLrfNcM/f0+7HYoLEzGXZaq6B8d9ZO3UgRbs/0D3BvdoyakqZmioiQG+sojds+/MMjHn4wZRuilF518dKAwglld8DvDw5obTaEpNaEFAqiry+DoVyUhx8ePX6X2sR4rGolgTp8qZdu29NB7w64+WlomDaUTTWhEHb7oyJRt9NDdPRsTGQnevj2dH06Whl6znR1MTMyp/UwDDvFREhLPeTUqGAhLaYPbw4ULiyMjfVZXp9H284bQa5y9XWtiQnyzkpAXcEWjJsY2s2JFPF8fvcITT/YuKjJqo59Or2frVgder481RZ2aUZKEFmhHRkdnNpYJZmfHMz5+e4lM/MZpEvrLW86qVUns3NXHYW0RWiL0emM+jfvzcaSfZXomrIi9e/N4/70Cenpnub/Uo/bjEITeBvZF9yxFdGpq0mk9UcqRzyepb+hTDGzg/3tBqB9Yu5SEhPaEBvUEbEBoQhBS6Ccz087keBUezwybKro0l+adJhev7hvSXTY5oC2+naDG1Xb+nJuyslTN3RYi9O/lSnJylFdC9GiBQJD4xDOhT488nM7J1vCZkpx6RnGZ2m0w5w8fFfsbh3njTXGHLmyHPyumvj6L4nWdDAz6FIBIhKSQ1ebRZESfnL3E5eR2RHZRdJ/R7rRESAxw/VoVaWkiMQy3+fkg9oRwZBQR8z+IzXb7kK/e0k37L+FDTzSzo8LT6cbt1l8yhai9f5bjWp3E3FyQhKSFZOSgARUp+X1H7R98d+Ka5lLJjwainhTTbAZejvbgm32ApJSzhk61lm9qKsDyzF8t22lE8pTuSW3q9RZAht/KUgnMnj1ODnxYqHd9hA7G0GStEtDCNTe5aGq+xMiIeWFh9eoQ+3PlnZCyYnvsmxIerc1gbNyPM3dBFinS5mUyQjZA5Lh3ra0vTaG7a6PRLlwG3IhO0C7fKuiWnFQ0mYLCToaGlIehyIOAUDJumsJGb9UvvpzkqaeVF6UZe7lMAvfscwMcPDiuZRLhoSa0A/hWbbGuOJnenk2Rzw07+2g5opkbRzC7d2fx6aHiyLtOZET/a8BbEqhVBnUAlVrTuDKxmYwMZSnV0TFNb+9N5oNBSu5LoaoqXDTKpiNg2S1kovhXoFco+rWKOOlFprdGyzU25seZp1uP6QbkjkvpxMQ4tjwUKhjuaiktZ1AHHDUTboz9Cs2obc3+fki82BpZMQ6shkdqLyM/VgkJHyKDEz+sxM+nWJq4+oVwLRV2sRBSkzgkEkiNK0f83BI79fFYWEvs/9LOfZz4dahMAAAAAElFTkSuQmCC", "code": "# encoding = utf-8\n\ndef process_event(helper, *args, **kwargs):\n    \"\"\"\n    # IMPORTANT\n    # Do not remove the anchor macro:start and macro:end lines.\n    # These lines are used to generate sample code. If they are\n    # removed, the sample code will not be updated when configurations\n    # are updated.\n\n    [sample_code_macro:start]\n\n    # The following example gets and sets the log level\n    helper.set_log_level(helper.log_level)\n\n    # The following example gets the setup parameters and prints them to the log\n    api_key = helper.get_global_setting(\"api_key\")\n    helper.log_info(\"api_key={}\".format(api_key))\n    index = helper.get_global_setting(\"index\")\n    helper.log_info(\"index={}\".format(index))\n\n    # The following example gets account information\n    user_account = helper.get_user_credential(\"<account_name>\")\n\n    # The following example sends rest requests to some endpoint\n    # response is a response object in python requests library\n    response = helper.send_http_request(\"http://www.splunk.com\", \"GET\", parameters=None,\n                                        payload=None, headers=None, cookies=None, verify=True, cert=None, timeout=None, use_proxy=True)\n    # get the response headers\n    r_headers = response.headers\n    # get the response body as text\n    r_text = response.text\n    # get response body as json. If the body text is not a json string, raise a ValueError\n    r_json = response.json()\n    # get response cookies\n    r_cookies = response.cookies\n    # get redirect history\n    historical_responses = response.history\n    # get response status code\n    r_status = response.status_code\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\n    response.raise_for_status()\n\n\n    # The following example gets the alert action parameters and prints them to the log\n    domain = helper.get_param(\"domain\")\n    helper.log_info(\"domain={}\".format(domain))\n\n    search_description = helper.get_param(\"search_description\")\n    helper.log_info(\"search_description={}\".format(search_description))\n\n\n    # The following example adds two sample events (\"hello\", \"world\")\n    # and writes them to Splunk\n    # NOTE: Call helper.writeevents() only once after all events\n    # have been added\n    helper.addevent(\"hello\", sourcetype=\"sample_sourcetype\")\n    helper.addevent(\"world\", sourcetype=\"sample_sourcetype\")\n    helper.writeevents(index=\"summary\", host=\"localhost\", source=\"localhost\")\n\n    # The following example gets the events that trigger the alert\n    events = helper.get_events()\n    for event in events:\n        helper.log_info(\"event={}\".format(event))\n\n    # helper.settings is a dict that includes environment configuration\n    # Example usage: helper.settings[\"server_uri\"]\n    helper.log_info(\"server_uri={}\".format(helper.settings[\"server_uri\"]))\n    [sample_code_macro:end]\n    \"\"\"\n    import json\n    \n    helper.log_info(\"Alert action security_trails_get_subdomain started.\")\n    \n    proxy = helper.get_proxy()\n    \n    if proxy:\n        use_proxy = True\n    else:\n        use_proxy = False\n    \n    #Get Global Parameters\n    api_key = helper.get_global_setting(\"api_key\")\n    index_name = helper.get_global_setting(\"index\")\n    \n    #Get Local Parameters\n    domain = helper.get_param(\"domain\")\n    search_description = helper.get_param(\"search_description\")\n    \n    #Create the URI String that looks for the domain\n    url = 'https://api.securitytrails.com/v1/domain/{}/subdomains'.format(domain)\n    \n    method = \"GET\"\n    \n    #Build HTTP Connection\n    #http = helper.build_http_connection(helper.proxy, timeout=30)\n    \n    \n    #Create Header Values\n    headers = {\n    'APIKEY' : '{}'.format(api_key)\n    }\n    \n    #Make HTTP Request\n    response = helper.send_http_request(url, method, parameters=None, payload=None, headers=headers, cookies=None, verify=True, cert=None, timeout=10, use_proxy=use_proxy)\n\n    if response.status_code == 200:\n        #Log successfull request\n        helper.log_info(\"Received 200 OK from security trails for domain {}.\".format(domain))\n        \n        #Add note information to JSON output\n        json_load = response.json()\n        json_load['search_description'] = search_description\n        json_load['search_type'] = \"DNS Subdomain Search\"\n        \n        #Convert output to JSON String\n        json_data = json.dumps(json_load)\n        \n        #Add Event to Adaptive Response Framework\n        helper.addevent(json_data, sourcetype=\"securitytrails:json\")\n        try:\n            #Try writing to the specified index in global settings\n            helper.writeevents(source=\"securitytrails\", index=index_name, host=\"adaptive_response\")\n        except Exception as e:\n            #If that fails write this as an exception\n            helper.log_error(\"Error with writing event. Error Message:{}\".format(e))\n\n    elif response.status_code == 429:\n        error_message = {\"error\" : \"You have reached your API access limit.  Please contact Security Trails sales team\"}\n        json_data = json.dumps(error_message)\n        helper.addevent(json_data, sourcetype=\"securitytrails:json\")\n        \n        try:\n            #Try writing to the specified index in global settings\n            helper.writeevents(source=\"securitytrails\", index=index_name, host=\"adaptive_response\")\n        except Exception as e:\n            #If that fails write this as an exception\n            helper.log_error(\"Error with writing event. Error Message:{}\".format(e))\n    \n    else:        \n        #If all fails then output an error message to the logging framework for passing onto security trails.\n        helper.log_error(\"Error with request of {}, response code of {} and content of {}.  Please pass this information onto security trails if you believe this is incorrect.\".format(domain,response.status_code,response.json()))\n    \n    \n \n    \n\n    # TODO: Implement your alert action logic here\n    return 0\n", "largeIcon": "iVBORw0KGgoAAAANSUhEUgAAAEgAAABICAYAAABV7bNHAAANqElEQVR4Xu1cCVSWVRp+WARlFVDE2A1QNDYVtY45WpnLqIxmrpNNm3WmaXGrKK3Uxr31NKktM9WoWWqh6Yia1mSZO4ssKogskiCLCPIDKjDn+eFfvn/77vfzA82cec/xgHz3vu97n+8u73Y/O3QOdQMwDEA0gBAA/gDsAPgBcARwqVUt/iwEcA7AMQAVHa0uleoI4qD/DOBJAL0BeFkptBpAMYCtAFYDaLCSj3C39gboUQAfAbAX1kh5w0QAq5R3E+vRHgBxybwLYJKYCjZrdQDA8wCybMaxdd3bil8YgLcBTLAVQyv5HAXwOIBMK/tLutliBnH5vAdgLoAutlDKBjyaAHwDYBaAG23h11aAAgDkAOjaFiXasS838XgAZ6yVYS1A7LcUwBJrBXdwv88APAagUalcawCiDfM1gLFKhXVy+wwAvwNQqUQPawA6DyBciRBTbUNDnTEk3g0DB7qCv7u62MPbm+YSUHrlJm7eaMaFvAakpNTi8E/V+PXXm20Vyf4lACIBVIkyUwKQC4AiAN6izA3bTZnijddeDUBwkBM8PVvAEKXKq7dQWNiABQsLcOgQ7UWrqQ5ATwC1IhyUAEQz3ypwtn0VjqkP+IjoI9wmKakSkx/gZLaKeLLRmlfJ9RYBiHtOmtJl1atXF3y4IRSTJlmFqZze2ue7vq3Ek09dREmJ4iVY2rrcrloSJgcQbZzvAIwS1phH22J/LFkcgC5dzLM/eqwGR45cx9GjNcjNrUdl5S0UFLaYLCHBzvDz64KwsK6Ii3PFyJEeiIt1gZ2daX63bjXj9aWXsGJlMZqblWiqPv4HW7KV5ABaCGCtqMiuXe2RcioK/fpx0hlTVrYKiYlF+PeP1bh2TdmJyxk5dIgbVq0MRGQkt0NjysxSIX5IBurqaCcK0z8A0Gc0SZYA8gBwTVQMT6PjR++Ag4MxyzMZKtx5ZwZqVYoUNyva1dUePxzqj8GD3Yza3LjRhPihGUhPl91e9PveDeAnUwLNAcS/U4KQhTxhQnd8u7OfEf/y8pvoPyAdZeWK9weh9+Lh4YC83Fj4+Bh7OKPvz8Z3B4XfL+U5m1pq5gB6H8DTIlqaAqepqRlvvnkZL7zEWFf7kr09sHZNMJ5/zg/29tLh3HNfFr7/Xtgk2A1goqG2pgDq1WrvyDqeXFanTkQZITAx4Rx277Z4ONgctT8keGHH9ggjkMIjUpB7QSiuxvV/J4Dj+sqZAugrAA/KjcDLywFlpYON9pzgkNMoLGqTAy0n2uzzgAAnFBUMlDxvbGyGu+cJ0Y37BIAhlgBisOuiiIa552Nx++3SLaozwdHo7NvTEaUlPLl1lJGhQlRMusiw2GYQgNOaxoYziEfen+Q4vbrEH0tfD9Q2454zbvxZ7D+gaFOUE2P184RJXkj6pq+k/6uvFWH5Gwxny9LJ1hCJuqEhQLJmVoC/E4oKpdN46bJLakPtt0TvvhOCZ59hkqSFaEz6B57GlStCJ6qrxg3RB2gKgB1yg9yfHInRoz21zSiwV+9Tct06/DlPt+KigfDzc9LK/uemMsx5+IKILmsAvGg4g24BcJDr3dzIdJaOevY6ifJydv3tEcMoeblxEsVc3I6LbNhcSepMjGYGERjZUe5LjsT9erPn8OFqjBhp0ySCYpQ/+FsozpxRYf0G+p7GVJgfh8BA2oAt9MEHJXj6mXwROfSX6jUAPQLg73K9DGePm/txm7kPcrJNPX/pxduwckWQ+tETc/Pw8SdXjJq5uNijtkZycsPOgYkPWaKx/IwGIB5r0rlo0J/Brh3bIrR/TU2tRdwgq2PhstrJNZj7hC82buijbXZHdBoyMxkLM6YLubHoE6ozSe4bnYWD8kG3ywBu0wBE6BllM0tpqdGIjtJ50eMnnMXevcKRS7nxKno+fjx9v75aq/mvK4qxeAmDnaZp/Lju2LNb5ytmZKoQFS1rFxFtFw1Assd7zbV4uLnp9vDu3icUhywUoWCmcWyMC1JOs+ahhRhLCu+bapF1Dx9HlF3RGY/V1Y3w9KLRLEvBBIiWI40js2R4GjCQPnBwxy8vf38nXDKwwQRPJaSnRiNKbwW4uh2HSj5uNIMAMV/0sSWA5jzUA599ysxyC334Uak6zNmR5OvbBTyRnJ11dRCPPHoBn35WJqTGmtVBWLTwNm3badPPY9t22QzQOgLEMpIXLElZtzYIC+brmM+anYMvtiov1Rk7xhPJ+5S7I87OdmontGdPXYCBUcmRo8RNjFkzfbB5ky5b9eZbv2LhItlwzHYCxNnDWWSWtn0ZjqlTdVmJmLh0pRE7aI7kL78qx4yZuUJvXdMo51ysOj6tT67ux6FSEKEcNswNv/x8h5bFtu0VmDadWXOLlEyAtgGY6u3lCHcP04b0Nzsi1MFzDY0clYn8AuOQRnNzMwpbA+/6YidO9MKuJJ3zmJVVB4JM/8gSOdgDe/b0w5j7u2ubUcbESeew51/KTlBDHzI5uQrjfn9WDqBULUBsyQ2QG6E1xMEOH5GJY8euS7pzcMl7jcOx2dl1uGt4BqqqzAfvk76OQEKCNG20aXMZHpoj5E9J9LAJQAyC8QgNDtKZ5iJgERzaRQcMwh0D+ncD7SdTgXzyLShowKD4M6ioMPZyPv6wDx57zFcinsezT8+TsjPPlM42AYiM3d3tce5sLHrrecGWQGIs6K7hxjOHfehRb9kchunTephlUVPTCF+/k6iv1y23t9YFY948ljJKKSw8FRfy6kXemVGbtgD0iam8UEPdEDg5yZcWDohKA/cUS7Rgfm+sWxtssQ0NN84Qw9NG02nV6mIkvmzeWpZDbdhQN/xyRLdJb99RgQeniW3STAwyQWhEV0oGSY5W/QaM9dIXoyctQnMf98X69aFGQXVNX87EeQsK8O7bjPpK6eLFBoRFpKCpDWm1mTN8sGWz7ph/+53LmL+gQE71HRYNRZdu9sjOikGQwZ7EPYcplcOHa+QESJ6PG9sdO5P6WkxJGzKkLLoS+flCmQmz+qx4IxCJiSzHbqHZf8zBli9kbTm1ocgSNUmqQ18Ka3ZST0dpYyqcOWPGnsXBQ8oNPvKNj2cG1jhVZG5kdELpjLaVOIaYGJ2p0sP3pMnDwUDOLALEfxYnL4sQSi8PgpeXI6Jj04WXlblBcWbWXpfGaEy1ZfqY9lJbycfbEeVlVjmrIRpvng6N+aOmVcP+/bvJbsiig6FJkZ0ZCxYlmCPBwJasyHvv9cR3+1lY1kLnc+rQtx8reiySJNzBeEGMXA9bP3d3d8DhH/sjJlo39TUyJk85h6SdtsnO0myJCNe5KmPHZ2OfvE8oCZix8JpXBjqcHB3tcOhgJO4ezmKSFtq1qxIJk62uHpOMoVs3e6gMlrPgzFzP+yWaJcaCQaGEUXshuHFDKOY+0QsNDU1gME7fcGyLTENHd+uXFZg5S9b+oUi+sRr9vJhsVLEtior0XbcmGN/uvqousLIFcQlXV/GQ1pFgoIwd1NjoAzQDwBe2UOy3wINuTn6eNOWTtLMSk6cILd13AMwzBIj/7/RZZCtwV68KwguLdEE+GpwhfVJQXCxUeWIy9UzdNrdeALGVnp3C555RHti/L1ISRVi5qhgvvyLky6UA0BYfGBYvhALI65RR2UgoLf+y0kESny8vrx5hEamiFbC0YLUpD1MFVLyHMdlG+nYoG4JToWcxUzidYBZQCYZnJbPH1B7Ev3Hh0s1VdldAD4rw8K7IybEubmMtolxWB/ZHGkUL7h6RiZ9+FnKq6W6NAPCzvg7mijg3tl6QU6zvkHhXddxl2fJisG6ovYmn1dLXA5D4kr9R5PLhR3Lx+efloiokAxhn2NgcQIyU8bKHUBmwhikLBWh3aEKsvHzCmBGr6NuDaOdknomWVG9o5MycnYOtylJTzKsbRf7MAUQ5rJJSlDowF2BLS6tF7EDbZmKPHhmAoUPdjXDnnsNq+9MpQpd5NP151eIHUy/REkBsvxjActG3T78nKyMGISGmg/6MPj77XD5OnrqO69eVhQc9PRwQE+uC998LlaSQ9XXjacViTcENWdOVd/BnmhujHEBWXWZZviwAi1/hdVbzlJpWq773xTKanNx6lFy+ifyClqjhf9NlFupLq5JRK10xjsCUCg52wsb1fTBmjC7pJ9BNcZN9+6ow96k8kwlLGWaMgQ0AYDG5LzeDNDIY1WKNm+JPSvDiyZZNYTa/N7Znz1VMn5FjbYUb/Q2WwMoGnEQB0swk3vk0vmIj+N6ZWXhjeaD6LpiLi2y9qISrStWovjTHGLU1hRN6zAgOCw2kKWAzY1ACkIYF616MczOCIGmaMcXNgtD4wW7qTd3REdoU07XqRtSpmtSZV55Ge5OrUGSb6w1cTiwSkJ05Gj2tAYj2Am/GKLqFqBC/9mjOSgVaymIFRa0aWAMQu/J04xdXFrXHSNqBJ4/yOdZETa0FSDMG1uDKpifbYcBKWLJ613IRowVubQWIrLnbMr8/uy0OrpIRC7SlFbofQEJnf9xEX9f/fx5H4M2xCaulGNMdI9jeVs3oS7HWUqi+V1SoLZaYOVmMBLD2kd8Wkq+jEdXYuB2/QsNCVMs1OFbyb0+A9FWiJT4fwF9arXHjVKrYAAgCa3c3AXjtf+Ejb+aGTVuKNgkrCm4HwIvEfFmsD+BPja1Cy50xctb7/qjUhhHD3HKr/wCHCzGJX7wGIwAAAABJRU5ErkJggg=="}, {"short_name": "searching_domains", "label": "Searching Domains", "description": "Filter and search specific records using this endpoint. Using simple filter composition, any type of data fetching is possible", "largeIcon": "iVBORw0KGgoAAAANSUhEUgAAAEgAAABICAYAAABV7bNHAAANqElEQVR4Xu1cCVSWVRp+WARlFVDE2A1QNDYVtY45WpnLqIxmrpNNm3WmaXGrKK3Uxr31NKktM9WoWWqh6Yia1mSZO4ssKogskiCLCPIDKjDn+eFfvn/77vfzA82cec/xgHz3vu97n+8u73Y/O3QOdQMwDEA0gBAA/gDsAPgBcARwqVUt/iwEcA7AMQAVHa0uleoI4qD/DOBJAL0BeFkptBpAMYCtAFYDaLCSj3C39gboUQAfAbAX1kh5w0QAq5R3E+vRHgBxybwLYJKYCjZrdQDA8wCybMaxdd3bil8YgLcBTLAVQyv5HAXwOIBMK/tLutliBnH5vAdgLoAutlDKBjyaAHwDYBaAG23h11aAAgDkAOjaFiXasS838XgAZ6yVYS1A7LcUwBJrBXdwv88APAagUalcawCiDfM1gLFKhXVy+wwAvwNQqUQPawA6DyBciRBTbUNDnTEk3g0DB7qCv7u62MPbm+YSUHrlJm7eaMaFvAakpNTi8E/V+PXXm20Vyf4lACIBVIkyUwKQC4AiAN6izA3bTZnijddeDUBwkBM8PVvAEKXKq7dQWNiABQsLcOgQ7UWrqQ5ATwC1IhyUAEQz3ypwtn0VjqkP+IjoI9wmKakSkx/gZLaKeLLRmlfJ9RYBiHtOmtJl1atXF3y4IRSTJlmFqZze2ue7vq3Ek09dREmJ4iVY2rrcrloSJgcQbZzvAIwS1phH22J/LFkcgC5dzLM/eqwGR45cx9GjNcjNrUdl5S0UFLaYLCHBzvDz64KwsK6Ii3PFyJEeiIt1gZ2daX63bjXj9aWXsGJlMZqblWiqPv4HW7KV5ABaCGCtqMiuXe2RcioK/fpx0hlTVrYKiYlF+PeP1bh2TdmJyxk5dIgbVq0MRGQkt0NjysxSIX5IBurqaCcK0z8A0Gc0SZYA8gBwTVQMT6PjR++Ag4MxyzMZKtx5ZwZqVYoUNyva1dUePxzqj8GD3Yza3LjRhPihGUhPl91e9PveDeAnUwLNAcS/U4KQhTxhQnd8u7OfEf/y8pvoPyAdZeWK9weh9+Lh4YC83Fj4+Bh7OKPvz8Z3B4XfL+U5m1pq5gB6H8DTIlqaAqepqRlvvnkZL7zEWFf7kr09sHZNMJ5/zg/29tLh3HNfFr7/Xtgk2A1goqG2pgDq1WrvyDqeXFanTkQZITAx4Rx277Z4ONgctT8keGHH9ggjkMIjUpB7QSiuxvV/J4Dj+sqZAugrAA/KjcDLywFlpYON9pzgkNMoLGqTAy0n2uzzgAAnFBUMlDxvbGyGu+cJ0Y37BIAhlgBisOuiiIa552Nx++3SLaozwdHo7NvTEaUlPLl1lJGhQlRMusiw2GYQgNOaxoYziEfen+Q4vbrEH0tfD9Q2454zbvxZ7D+gaFOUE2P184RJXkj6pq+k/6uvFWH5Gwxny9LJ1hCJuqEhQLJmVoC/E4oKpdN46bJLakPtt0TvvhOCZ59hkqSFaEz6B57GlStCJ6qrxg3RB2gKgB1yg9yfHInRoz21zSiwV+9Tct06/DlPt+KigfDzc9LK/uemMsx5+IKILmsAvGg4g24BcJDr3dzIdJaOevY6ifJydv3tEcMoeblxEsVc3I6LbNhcSepMjGYGERjZUe5LjsT9erPn8OFqjBhp0ySCYpQ/+FsozpxRYf0G+p7GVJgfh8BA2oAt9MEHJXj6mXwROfSX6jUAPQLg73K9DGePm/txm7kPcrJNPX/pxduwckWQ+tETc/Pw8SdXjJq5uNijtkZycsPOgYkPWaKx/IwGIB5r0rlo0J/Brh3bIrR/TU2tRdwgq2PhstrJNZj7hC82buijbXZHdBoyMxkLM6YLubHoE6ozSe4bnYWD8kG3ywBu0wBE6BllM0tpqdGIjtJ50eMnnMXevcKRS7nxKno+fjx9v75aq/mvK4qxeAmDnaZp/Lju2LNb5ytmZKoQFS1rFxFtFw1Assd7zbV4uLnp9vDu3icUhywUoWCmcWyMC1JOs+ahhRhLCu+bapF1Dx9HlF3RGY/V1Y3w9KLRLEvBBIiWI40js2R4GjCQPnBwxy8vf38nXDKwwQRPJaSnRiNKbwW4uh2HSj5uNIMAMV/0sSWA5jzUA599ysxyC334Uak6zNmR5OvbBTyRnJ11dRCPPHoBn35WJqTGmtVBWLTwNm3badPPY9t22QzQOgLEMpIXLElZtzYIC+brmM+anYMvtiov1Rk7xhPJ+5S7I87OdmontGdPXYCBUcmRo8RNjFkzfbB5ky5b9eZbv2LhItlwzHYCxNnDWWSWtn0ZjqlTdVmJmLh0pRE7aI7kL78qx4yZuUJvXdMo51ysOj6tT67ux6FSEKEcNswNv/x8h5bFtu0VmDadWXOLlEyAtgGY6u3lCHcP04b0Nzsi1MFzDY0clYn8AuOQRnNzMwpbA+/6YidO9MKuJJ3zmJVVB4JM/8gSOdgDe/b0w5j7u2ubUcbESeew51/KTlBDHzI5uQrjfn9WDqBULUBsyQ2QG6E1xMEOH5GJY8euS7pzcMl7jcOx2dl1uGt4BqqqzAfvk76OQEKCNG20aXMZHpoj5E9J9LAJQAyC8QgNDtKZ5iJgERzaRQcMwh0D+ncD7SdTgXzyLShowKD4M6ioMPZyPv6wDx57zFcinsezT8+TsjPPlM42AYiM3d3tce5sLHrrecGWQGIs6K7hxjOHfehRb9kchunTephlUVPTCF+/k6iv1y23t9YFY948ljJKKSw8FRfy6kXemVGbtgD0iam8UEPdEDg5yZcWDohKA/cUS7Rgfm+sWxtssQ0NN84Qw9NG02nV6mIkvmzeWpZDbdhQN/xyRLdJb99RgQeniW3STAwyQWhEV0oGSY5W/QaM9dIXoyctQnMf98X69aFGQXVNX87EeQsK8O7bjPpK6eLFBoRFpKCpDWm1mTN8sGWz7ph/+53LmL+gQE71HRYNRZdu9sjOikGQwZ7EPYcplcOHa+QESJ6PG9sdO5P6WkxJGzKkLLoS+flCmQmz+qx4IxCJiSzHbqHZf8zBli9kbTm1ocgSNUmqQ18Ka3ZST0dpYyqcOWPGnsXBQ8oNPvKNj2cG1jhVZG5kdELpjLaVOIaYGJ2p0sP3pMnDwUDOLALEfxYnL4sQSi8PgpeXI6Jj04WXlblBcWbWXpfGaEy1ZfqY9lJbycfbEeVlVjmrIRpvng6N+aOmVcP+/bvJbsiig6FJkZ0ZCxYlmCPBwJasyHvv9cR3+1lY1kLnc+rQtx8reiySJNzBeEGMXA9bP3d3d8DhH/sjJlo39TUyJk85h6SdtsnO0myJCNe5KmPHZ2OfvE8oCZix8JpXBjqcHB3tcOhgJO4ezmKSFtq1qxIJk62uHpOMoVs3e6gMlrPgzFzP+yWaJcaCQaGEUXshuHFDKOY+0QsNDU1gME7fcGyLTENHd+uXFZg5S9b+oUi+sRr9vJhsVLEtior0XbcmGN/uvqousLIFcQlXV/GQ1pFgoIwd1NjoAzQDwBe2UOy3wINuTn6eNOWTtLMSk6cILd13AMwzBIj/7/RZZCtwV68KwguLdEE+GpwhfVJQXCxUeWIy9UzdNrdeALGVnp3C555RHti/L1ISRVi5qhgvvyLky6UA0BYfGBYvhALI65RR2UgoLf+y0kESny8vrx5hEamiFbC0YLUpD1MFVLyHMdlG+nYoG4JToWcxUzidYBZQCYZnJbPH1B7Ev3Hh0s1VdldAD4rw8K7IybEubmMtolxWB/ZHGkUL7h6RiZ9+FnKq6W6NAPCzvg7mijg3tl6QU6zvkHhXddxl2fJisG6ovYmn1dLXA5D4kr9R5PLhR3Lx+efloiokAxhn2NgcQIyU8bKHUBmwhikLBWh3aEKsvHzCmBGr6NuDaOdknomWVG9o5MycnYOtylJTzKsbRf7MAUQ5rJJSlDowF2BLS6tF7EDbZmKPHhmAoUPdjXDnnsNq+9MpQpd5NP151eIHUy/REkBsvxjActG3T78nKyMGISGmg/6MPj77XD5OnrqO69eVhQc9PRwQE+uC998LlaSQ9XXjacViTcENWdOVd/BnmhujHEBWXWZZviwAi1/hdVbzlJpWq773xTKanNx6lFy+ifyClqjhf9NlFupLq5JRK10xjsCUCg52wsb1fTBmjC7pJ9BNcZN9+6ow96k8kwlLGWaMgQ0AYDG5LzeDNDIY1WKNm+JPSvDiyZZNYTa/N7Znz1VMn5FjbYUb/Q2WwMoGnEQB0swk3vk0vmIj+N6ZWXhjeaD6LpiLi2y9qISrStWovjTHGLU1hRN6zAgOCw2kKWAzY1ACkIYF616MczOCIGmaMcXNgtD4wW7qTd3REdoU07XqRtSpmtSZV55Ge5OrUGSb6w1cTiwSkJ05Gj2tAYj2Am/GKLqFqBC/9mjOSgVaymIFRa0aWAMQu/J04xdXFrXHSNqBJ4/yOdZETa0FSDMG1uDKpifbYcBKWLJ613IRowVubQWIrLnbMr8/uy0OrpIRC7SlFbofQEJnf9xEX9f/fx5H4M2xCaulGNMdI9jeVs3oS7HWUqi+V1SoLZaYOVmMBLD2kd8Wkq+jEdXYuB2/QsNCVMs1OFbyb0+A9FWiJT4fwF9arXHjVKrYAAgCa3c3AXjtf+Ejb+aGTVuKNgkrCm4HwIvEfFmsD+BPja1Cy50xctb7/qjUhhHD3HKr/wCHCzGJX7wGIwAAAABJRU5ErkJggg==", "uuid": "ea0f66028e174c86a96ddb37952394e4", "parameters": [{"format_type": "dropdownlist", "help_string": "", "name": "value", "possible_values": {"NS": "ns", "CNAME": "cname", "Whois Street 1": "whois_street1", "Whois Street 3": "whois_street4", "Whois Street 2": "whois_street2", "TLD": "tld", "Whois Organization": "whois_organization", "Whois Fax": "whois_fax", "Whois Postal Code": "whois_postalCode", "SOA Email": "soa_email", "Whois Name": "whois_name", "IPv4": "ipv4", "Whois City": "whois_city", "Subdomain": "subdomain", "Whois Email": "whois_email", "Whois Telephone": "whois_telephone", "MX": "mx", "IPv6": "ipv6"}, "type": "", "label": "Value", "default_value": "", "required": true}, {"format_type": "text", "help_string": "Examples are for ipv4 1.1.1.0/32 or 35.12.55.22.  Whois Email test@example.com", "name": "value_search", "type": "", "label": "Value Search", "value": "", "default_value": "", "required": true}, {"format_type": "text", "help_string": "Substring of a value. Eg. the value of oa would yield all hostnames containing oa characters.", "name": "keyword_search", "type": "", "label": "Keyword Search", "value": "", "default_value": "", "required": true}, {"format_type": "text", "help_string": "This search description field is for the purpose of tying a reason to the request that was made.", "name": "search_description", "type": "", "label": "Search Description", "value": "Adaptive Response Action", "default_value": "Adaptive Response Action", "required": true}], "smallIcon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAErUlEQVRYR7WYXVCUVRjHf+zyLYsgsJChiyBGKKuAFOlocSM1NDVToM400/TlnReVV91IM3XRRURNFzV2U+M4TSNWU05OZmj2ARqFKzjxaUtQSnyoCOK2LNucXc+678v7tYjn5p33Pf/nOf/znP8553neOBbfPgBqgTUqF8PAj8Azi3EdF4ORHRCD3RODjYBeBXKB/6zYWSU0CjitODTATAHLzXyYEaoBWs2cxNj/CvCuno0Rod+ACrPBHA4blRVpIVhb+3V8vqCZiej/G8jXAuoRugGk6Hn2XizH5UoyHHjw4k3WFp8zwgSAeDVAi1AbUK3lafRSJU5ngqLrfNcM/f0+7HYoLEzGXZaq6B8d9ZO3UgRbs/0D3BvdoyakqZmioiQG+sojds+/MMjHn4wZRuilF518dKAwglld8DvDw5obTaEpNaEFAqiry+DoVyUhx8ePX6X2sR4rGolgTp8qZdu29NB7w64+WlomDaUTTWhEHb7oyJRt9NDdPRsTGQnevj2dH06Whl6znR1MTMyp/UwDDvFREhLPeTUqGAhLaYPbw4ULiyMjfVZXp9H284bQa5y9XWtiQnyzkpAXcEWjJsY2s2JFPF8fvcITT/YuKjJqo59Or2frVgder481RZ2aUZKEFmhHRkdnNpYJZmfHMz5+e4lM/MZpEvrLW86qVUns3NXHYW0RWiL0emM+jfvzcaSfZXomrIi9e/N4/70Cenpnub/Uo/bjEITeBvZF9yxFdGpq0mk9UcqRzyepb+hTDGzg/3tBqB9Yu5SEhPaEBvUEbEBoQhBS6Ccz087keBUezwybKro0l+adJhev7hvSXTY5oC2+naDG1Xb+nJuyslTN3RYi9O/lSnJylFdC9GiBQJD4xDOhT488nM7J1vCZkpx6RnGZ2m0w5w8fFfsbh3njTXGHLmyHPyumvj6L4nWdDAz6FIBIhKSQ1ebRZESfnL3E5eR2RHZRdJ/R7rRESAxw/VoVaWkiMQy3+fkg9oRwZBQR8z+IzXb7kK/e0k37L+FDTzSzo8LT6cbt1l8yhai9f5bjWp3E3FyQhKSFZOSgARUp+X1H7R98d+Ka5lLJjwainhTTbAZejvbgm32ApJSzhk61lm9qKsDyzF8t22lE8pTuSW3q9RZAht/KUgnMnj1ODnxYqHd9hA7G0GStEtDCNTe5aGq+xMiIeWFh9eoQ+3PlnZCyYnvsmxIerc1gbNyPM3dBFinS5mUyQjZA5Lh3ra0vTaG7a6PRLlwG3IhO0C7fKuiWnFQ0mYLCToaGlIehyIOAUDJumsJGb9UvvpzkqaeVF6UZe7lMAvfscwMcPDiuZRLhoSa0A/hWbbGuOJnenk2Rzw07+2g5opkbRzC7d2fx6aHiyLtOZET/a8BbEqhVBnUAlVrTuDKxmYwMZSnV0TFNb+9N5oNBSu5LoaoqXDTKpiNg2S1kovhXoFco+rWKOOlFprdGyzU25seZp1uP6QbkjkvpxMQ4tjwUKhjuaiktZ1AHHDUTboz9Cs2obc3+fki82BpZMQ6shkdqLyM/VgkJHyKDEz+sxM+nWJq4+oVwLRV2sRBSkzgkEkiNK0f83BI79fFYWEvs/9LOfZz4dahMAAAAAElFTkSuQmCC", "active_response": {"subject": ["endpoint"], "category": ["Information Gathering"], "technology": [{"product": "API", "version": ["1.0.0"], "vendor": "Security Trails"}], "supports_adhoc": true, "task": ["create"]}, "code": "# encoding = utf-8\n\ndef process_event(helper, *args, **kwargs):\n    import json\n    \n    helper.log_info(\"Alert action searching_domains started.\")\n    \n    proxy = helper.get_proxy()\n    \n    if proxy:\n        use_proxy = True\n    else:\n        use_proxy = False\n    \n    #Get Global Parameters\n    api_key = helper.get_global_setting(\"api_key\")\n    index_name = helper.get_global_setting(\"index\")\n    \n    #Get Local Parameters\n    keyword_search = helper.get_param(\"keyword_search\")\n    value = helper.get_param(\"value\")\n    value_search = helper.get_param(\"value_search\")\n    search_description = helper.get_param(\"search_description\")\n    \n    #Create the URI String that looks for the domain\n    url = 'https://api.securitytrails.com/v1/search/list'\n    \n    #Specify Method\n    method = \"POST\"\n    \n    #Create filter\n    values = {}\n    values['filter'] = {}\n    values['filter'][value] = value_search \n    values['filter']['keyword'] = keyword_search\n    \n    values_payload = json.dumps(values)\n    \n    #Create Header Values\n    headers = {\n    'Content-Type': 'application/json',\n    'APIKEY' : '{}'.format(api_key)\n    }\n    \n    #Make HTTP Request\n    response = helper.send_http_request(url, method, parameters=None, payload=values_payload, headers=headers, cookies=None, verify=True, cert=None, timeout=10, use_proxy=use_proxy)\n\n    if response.status_code == 200:\n        #Log successfull request\n        helper.log_info(\"Received 200 OK from security trails for value {}:{} with keyword of {}.\".format(value,value_search,keyword_search))\n        \n        #Add note information to JSON output\n        json_load = response.json()\n        json_load['search_description'] = search_description\n        json_load['search_type'] = \"Exploration Domain Search\"\n        \n        #Convert output to JSON String\n        json_data = json.dumps(json_load)\n        \n        #Add Event to Adaptive Response Framework\n        helper.addevent(json_data, sourcetype=\"securitytrails:json\")\n        try:\n            #Try writing to the specified index in global settings\n            helper.writeevents(source=\"securitytrails\", index=index_name, host=\"adaptive_response\")\n        except Exception as e:\n            #If that fails write this as an exception\n            helper.log_error(\"Error with writing event. Error Message:{}\".format(e))\n\n    elif response.status_code == 400:\n        #Log successfull request\n        helper.log_info(\"Received 400 error from security trails for value {}:{} with keyword of {}.\".format(value,value_search,keyword_search))\n        \n        #Add note information to JSON output\n        json_load = response.json()\n        json_load['search_description'] = search_description\n        json_load['domain'] = domain\n        json_load['search_type'] = \"Exploration Domain Search\"\n        \n        #Convert output to JSON String\n        json_data = json.dumps(json_load)\n        \n        #Add Event to Adaptive Response Framework\n        helper.addevent(json_data, sourcetype=\"securitytrails:json\")\n        try:\n            #Try writing to the specified index in global settings\n            helper.writeevents(source=\"securitytrails\", index=index_name, host=\"adaptive_response\")\n        except Exception as e:\n            #If that fails write this as an exception\n            helper.log_error(\"Error with writing event. Error Message:{}\".format(e))\n\n    elif response.status_code == 429:\n        error_message = {\"error\" : \"You have reached your API access limit.  Please contact Security Trails sales team\"}\n        json_data = json.dumps(error_message)\n        helper.addevent(json_data, sourcetype=\"securitytrails:json\")\n        \n        try:\n            #Try writing to the specified index in global settings\n            helper.writeevents(source=\"securitytrails\", index=index_name, host=\"adaptive_response\")\n        except Exception as e:\n            #If that fails write this as an exception\n            helper.log_error(\"Error with writing event. Error Message:{}\".format(e))\n    \n    else:        \n        #If all fails then output an error message to the logging framework for passing onto security trails.\n        helper.log_error(\"Error with request of {}, response code of {} and content of {}.  Please pass this information onto security trails if you believe this is incorrect.\".format(value_search,response.status_code,response.json()))\n    \n    \n \n    \n\n    # TODO: Implement your alert action logic here\n    return 0\n"}, {"short_name": "list_tags", "label": "List Tags", "description": "Returns tags for a given domain.", "largeIcon": "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", "uuid": "8f001599a53a46a881d34a6f0060d726", "parameters": [{"format_type": "text", "help_string": "Enter domain name to be searched", "name": "domain", "type": "", "label": "Domain", "value": "splunk.com", "default_value": "", "required": true}, {"format_type": "text", "help_string": "This search description field is for the purpose of tying a reason to the request that was made.", "name": "search_description", "type": "", "label": "Search Description", "value": "Adaptive Response Action", "default_value": "Adaptive Response Action", "required": true}], "smallIcon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAErUlEQVRYR7WYXVCUVRjHf+zyLYsgsJChiyBGKKuAFOlocSM1NDVToM400/TlnReVV91IM3XRRURNFzV2U+M4TSNWU05OZmj2ARqFKzjxaUtQSnyoCOK2LNucXc+678v7tYjn5p33Pf/nOf/znP8553neOBbfPgBqgTUqF8PAj8Azi3EdF4ORHRCD3RODjYBeBXKB/6zYWSU0CjitODTATAHLzXyYEaoBWs2cxNj/CvCuno0Rod+ACrPBHA4blRVpIVhb+3V8vqCZiej/G8jXAuoRugGk6Hn2XizH5UoyHHjw4k3WFp8zwgSAeDVAi1AbUK3lafRSJU5ngqLrfNcM/f0+7HYoLEzGXZaq6B8d9ZO3UgRbs/0D3BvdoyakqZmioiQG+sojds+/MMjHn4wZRuilF518dKAwglld8DvDw5obTaEpNaEFAqiry+DoVyUhx8ePX6X2sR4rGolgTp8qZdu29NB7w64+WlomDaUTTWhEHb7oyJRt9NDdPRsTGQnevj2dH06Whl6znR1MTMyp/UwDDvFREhLPeTUqGAhLaYPbw4ULiyMjfVZXp9H284bQa5y9XWtiQnyzkpAXcEWjJsY2s2JFPF8fvcITT/YuKjJqo59Or2frVgder481RZ2aUZKEFmhHRkdnNpYJZmfHMz5+e4lM/MZpEvrLW86qVUns3NXHYW0RWiL0emM+jfvzcaSfZXomrIi9e/N4/70Cenpnub/Uo/bjEITeBvZF9yxFdGpq0mk9UcqRzyepb+hTDGzg/3tBqB9Yu5SEhPaEBvUEbEBoQhBS6Ccz087keBUezwybKro0l+adJhev7hvSXTY5oC2+naDG1Xb+nJuyslTN3RYi9O/lSnJylFdC9GiBQJD4xDOhT488nM7J1vCZkpx6RnGZ2m0w5w8fFfsbh3njTXGHLmyHPyumvj6L4nWdDAz6FIBIhKSQ1ebRZESfnL3E5eR2RHZRdJ/R7rRESAxw/VoVaWkiMQy3+fkg9oRwZBQR8z+IzXb7kK/e0k37L+FDTzSzo8LT6cbt1l8yhai9f5bjWp3E3FyQhKSFZOSgARUp+X1H7R98d+Ka5lLJjwainhTTbAZejvbgm32ApJSzhk61lm9qKsDyzF8t22lE8pTuSW3q9RZAht/KUgnMnj1ODnxYqHd9hA7G0GStEtDCNTe5aGq+xMiIeWFh9eoQ+3PlnZCyYnvsmxIerc1gbNyPM3dBFinS5mUyQjZA5Lh3ra0vTaG7a6PRLlwG3IhO0C7fKuiWnFQ0mYLCToaGlIehyIOAUDJumsJGb9UvvpzkqaeVF6UZe7lMAvfscwMcPDiuZRLhoSa0A/hWbbGuOJnenk2Rzw07+2g5opkbRzC7d2fx6aHiyLtOZET/a8BbEqhVBnUAlVrTuDKxmYwMZSnV0TFNb+9N5oNBSu5LoaoqXDTKpiNg2S1kovhXoFco+rWKOOlFprdGyzU25seZp1uP6QbkjkvpxMQ4tjwUKhjuaiktZ1AHHDUTboz9Cs2obc3+fki82BpZMQ6shkdqLyM/VgkJHyKDEz+sxM+nWJq4+oVwLRV2sRBSkzgkEkiNK0f83BI79fFYWEvs/9LOfZz4dahMAAAAAElFTkSuQmCC", "active_response": {"subject": ["endpoint"], "category": ["Information Gathering"], "technology": [{"product": "API", "version": ["1.0.0"], "vendor": "Security Trails"}], "supports_adhoc": true, "task": ["update"]}, "code": "# encoding = utf-8\n\ndef process_event(helper, *args, **kwargs):\n    \"\"\"\n    # IMPORTANT\n    # Do not remove the anchor macro:start and macro:end lines.\n    # These lines are used to generate sample code. If they are\n    # removed, the sample code will not be updated when configurations\n    # are updated.\n\n    [sample_code_macro:start]\n\n    # The following example gets account information\n    user_account = helper.get_user_credential(\"<account_name>\")\n\n    # The following example gets and sets the log level\n    helper.set_log_level(helper.log_level)\n\n    # The following example gets the setup parameters and prints them to the log\n    api_key = helper.get_global_setting(\"api_key\")\n    helper.log_info(\"api_key={}\".format(api_key))\n    index = helper.get_global_setting(\"index\")\n    helper.log_info(\"index={}\".format(index))\n\n    # The following example sends rest requests to some endpoint\n    # response is a response object in python requests library\n    response = helper.send_http_request(\"http://www.splunk.com\", \"GET\", parameters=None,\n                                        payload=None, headers=None, cookies=None, verify=True, cert=None, timeout=None, use_proxy=True)\n    # get the response headers\n    r_headers = response.headers\n    # get the response body as text\n    r_text = response.text\n    # get response body as json. If the body text is not a json string, raise a ValueError\n    r_json = response.json()\n    # get response cookies\n    r_cookies = response.cookies\n    # get redirect history\n    historical_responses = response.history\n    # get response status code\n    r_status = response.status_code\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\n    response.raise_for_status()\n\n\n    # The following example gets the alert action parameters and prints them to the log\n    domain = helper.get_param(\"domain\")\n    helper.log_info(\"domain={}\".format(domain))\n\n    search_description = helper.get_param(\"search_description\")\n    helper.log_info(\"search_description={}\".format(search_description))\n\n\n    # The following example adds two sample events (\"hello\", \"world\")\n    # and writes them to Splunk\n    # NOTE: Call helper.writeevents() only once after all events\n    # have been added\n    helper.addevent(\"hello\", sourcetype=\"sample_sourcetype\")\n    helper.addevent(\"world\", sourcetype=\"sample_sourcetype\")\n    helper.writeevents(index=\"summary\", host=\"localhost\", source=\"localhost\")\n\n    # The following example gets the events that trigger the alert\n    events = helper.get_events()\n    for event in events:\n        helper.log_info(\"event={}\".format(event))\n\n    # helper.settings is a dict that includes environment configuration\n    # Example usage: helper.settings[\"server_uri\"]\n    helper.log_info(\"server_uri={}\".format(helper.settings[\"server_uri\"]))\n    [sample_code_macro:end]\n    \"\"\"\n    import json\n    \n    helper.log_info(\"Alert action security_trails_get_tags started.\")\n    \n    proxy = helper.get_proxy()\n    \n    if proxy:\n        use_proxy = True\n    else:\n        use_proxy = False\n    \n    #Get Global Parameters\n    api_key = helper.get_global_setting(\"api_key\")\n    index_name = helper.get_global_setting(\"index\")\n    \n    #Get Local Parameters\n    domain = helper.get_param(\"domain\")\n    search_description = helper.get_param(\"search_description\")\n    \n    #Create the URI String that looks for the domain\n    url = 'https://api.securitytrails.com/v1/domain/{}/tags'.format(domain)\n    \n    method = \"GET\"\n\n    #Create Header Values\n    headers = {\n    'APIKEY' : '{}'.format(api_key)\n    }\n    \n    #Make HTTP Request\n    response = helper.send_http_request(url, method, parameters=None, payload=None, headers=headers, cookies=None, verify=True, cert=None, timeout=10, use_proxy=use_proxy)\n\n    if response.status_code == 200:\n        #Log successfull request\n        helper.log_info(\"Received 200 OK from security trails for domain {}.\".format(domain))\n        \n        #Add note information to JSON output\n        json_load = response.json()\n        json_load['search_description'] = search_description\n        json_load['search_type'] = \"Tags Search\"\n        #Convert output to JSON String\n        json_data = json.dumps(json_load)\n        \n        #Add Event to Adaptive Response Framework\n        helper.addevent(json_data, sourcetype=\"securitytrails:json\")\n        try:\n            #Try writing to the specified index in global settings\n            helper.writeevents(source=\"securitytrails\", index=index_name, host=\"adaptive_response\")\n        except Exception as e:\n            #If that fails write this as an exception\n            helper.log_error(\"Error with writing event. Error Message:{}\".format(e))\n\n    elif response.status_code == 429:\n        error_message = {\"error\" : \"You have reached your API access limit.  Please contact Security Trails sales team\"}\n        json_data = json.dumps(error_message)\n        helper.addevent(json_data, sourcetype=\"securitytrails:json\")\n        \n        try:\n            #Try writing to the specified index in global settings\n            helper.writeevents(source=\"securitytrails\", index=index_name, host=\"adaptive_response\")\n        except Exception as e:\n            #If that fails write this as an exception\n            helper.log_error(\"Error with writing event. Error Message:{}\".format(e))\n    \n    else:        \n        #If all fails then output an error message to the logging framework for passing onto security trails.\n        helper.log_error(\"Error with request of {}, response code of {} and content of {}.  Please pass this information onto security trails if you believe this is incorrect.\".format(domain,response.status_code,response.json()))\n    \n    \n \n    \n\n    # TODO: Implement your alert action logic here\n    return 0\n"}, {"short_name": "ip_range_checker", "label": "IP Range Checker", "description": "Returns the neighbours in any given IP level range and essentially allowing to explore closeby IP addresses.", "largeIcon": "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", "uuid": "e8469efa3ecd4a07b19ba4ee9dbf3031", "parameters": [{"format_type": "text", "help_string": "Example 1.1.1.0/32", "name": "ip_range", "type": "", "label": "IP Range", "value": "1.1.1.0/24", "default_value": "", "required": true}, {"format_type": "text", "help_string": "This search description field is for the purpose of tying a reason to the request that was made.", "name": "search_description", "type": "", "label": "Search Description", "value": "Adaptive Response Action", "default_value": "Adaptive Response Action", "required": false}], "smallIcon": "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", "active_response": {"subject": ["endpoint"], "category": ["Information Gathering"], "technology": [{"product": "API", "version": ["1.0.0"], "vendor": "Security Trails"}], "supports_adhoc": true, "task": ["create"]}, "code": "# encoding = utf-8\n\ndef process_event(helper, *args, **kwargs):\n    import json\n    import re\n    import sys\n    \n    helper.log_info(\"Alert action history_dns started.\")\n    \n    proxy = helper.get_proxy()\n    \n    if proxy:\n        use_proxy = True\n    else:\n        use_proxy = False\n    \n    #Get Global Parameters\n    api_key = helper.get_global_setting(\"api_key\")\n    index_name = helper.get_global_setting(\"index\")\n    \n    #Get Local Parameters\n    ip_range = helper.get_param(\"ip_range\")\n    search_description = helper.get_param(\"search_description\")\n    \n    ip_mask_check = re.match(\"^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/\\d{1,2}$\",ip_range)\n    if not ip_mask_check:\n        helper.log_error(\"Invalid IPv4 Address Range with IP Range: {}\".format(ip_range))\n        sys.exit()\n    #Create the URI String that looks for the domain\n    ip = str(ip_range.split(\"/\")[0])\n    mask = str(ip_range.split(\"/\")[1])\n    url = 'https://api.securitytrails.com/v1/explore/ip/{}?mask-{}'.format(ip,mask)\n    \n    method = \"GET\"\n    \n    #Create Header Values\n    headers = {\n    'APIKEY' : '{}'.format(api_key)\n    }\n    \n    #Make HTTP Request\n    response = helper.send_http_request(url, method, parameters=None, payload=None, headers=headers, cookies=None, verify=True, cert=None, timeout=10, use_proxy=use_proxy)\n\n    if response.status_code == 200:\n        #Log successfull request\n        helper.log_info(\"Received 200 OK from security trails for domain {}.\".format(ip_range))\n        \n        #Add note information to JSON output\n        json_load = response.json()\n        json_load['search_description'] = search_description\n        json_load['search_type'] = \"IPv4 Explorer Search\"\n        \n        #Convert output to JSON String\n        json_data = json.dumps(json_load)\n        \n        #Add Event to Adaptive Response Framework\n        helper.addevent(json_data, sourcetype=\"securitytrails:json\")\n        try:\n            #Try writing to the specified index in global settings\n            helper.writeevents(source=\"securitytrails\", index=index_name, host=\"adaptive_response\")\n        except Exception as e:\n            #If that fails write this as an exception\n            helper.log_error(\"Error with writing event. Error Message:{}\".format(e))\n\n    elif response.status_code == 400:\n        #Log successfull request\n        helper.log_info(\"Received 400 error from security trails for domain {}.\".format(ip_range))\n        \n        #Add note information to JSON output\n        json_load = response.json()\n        json_load['search_description'] = search_description\n        json_load['ip_range'] = ip_range\n        json_load['search_type'] = \"IPv4 Explorer Search\"\n        \n        #Convert output to JSON String\n        json_data = json.dumps(json_load)\n        \n        #Add Event to Adaptive Response Framework\n        helper.addevent(json_data, sourcetype=\"securitytrails:json\")\n        try:\n            #Try writing to the specified index in global settings\n            helper.writeevents(source=\"securitytrails\", index=index_name, host=\"adaptive_response\")\n        except Exception as e:\n            #If that fails write this as an exception\n            helper.log_error(\"Error with writing event. Error Message:{}\".format(e))\n\n    elif response.status_code == 429:\n        error_message = {\"error\" : \"You have reached your API access limit.  Please contact Security Trails sales team\"}\n        json_data = json.dumps(error_message)\n        helper.addevent(json_data, sourcetype=\"securitytrails:json\")\n        \n        try:\n            #Try writing to the specified index in global settings\n            helper.writeevents(source=\"securitytrails\", index=index_name, host=\"adaptive_response\")\n        except Exception as e:\n            #If that fails write this as an exception\n            helper.log_error(\"Error with writing event. Error Message:{}\".format(e))\n    \n    else:        \n        #If all fails then output an error message to the logging framework for passing onto security trails.\n        helper.log_error(\"Error with request of {}, response code of {} and content of {}.  Please pass this information onto security trails if you believe this is incorrect.\".format(ip_range,response.status_code,response.json()))\n    \n    \n \n    \n\n    # TODO: Implement your alert action logic here\n    return 0\n"}]}, "validation": {"progress": 0.7857142857142857, "validation_id": "v_1516699933_68", "validators": ["best_practice_validation", "data_model_mapping_validation", "field_extract_validation", "app_cert_validation"], "status": "job_started"}}